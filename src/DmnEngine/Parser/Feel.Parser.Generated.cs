// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  BEZUGLIY-10
// DateTime: 6/30/2016 3:47:51 PM
// UserName: rumata
// Input file <Parser\Feel.Language.grammar.y - 6/30/2016 3:47:48 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using Softengi.DmnEngine.Ast;

namespace Softengi.DmnEngine.Parser
{
internal enum Token {error=2,EOF=3,STRING=4,NAME=5,NUMBER=6,
    BOOLEAN=7,C_EQ=8,C_NE=9,C_LT=10,C_LE=11,C_GT=12,
    C_GE=13,OP_MINUS=14,OP_PLUS=15,OP_DIV=16,OP_MUL=17,OP_POW=18,
    P_OPEN=19,P_CLOSE=20,SP_OPEN=21,SP_CLOSE=22,CP_OPEN=23,CP_CLOSE=24,
    COMMA=25,DOT=26,COLON=27,RANGE=28,NULL=29,NOT=30,
    OR=31,AND=32,IN=33,BETWEEN=34,FOR=35,RETURN=36,
    IF=37,THEN=38,ELSE=39,SOME=40,EVERY=41,SATISFIES=42,
    INSTANCE=43,OF=44,FUNCTION=45,EXTERNAL=46,DATE=47,TIME=48,
    DURATION=49};

internal partial struct ValueType
{ 
			public decimal n; 
			public string s; 
			public bool b;

			public INode nd;
			public QualifiedName qn;
			public ILogical lg;

			public ComparisonOperator co;
			public QuantorOperator qo;
	   }
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class FeelParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[196];
  private static State[] states = new State[212];
  private static string[] nonTerms = new string[] {
      "main", "simpleUnaryTests", "simplePositiveUnaryTests", "simplePositiveUnaryTest", 
      "endpoint", "simpleValue", "simpleLiteral", "numericLiteral", "booleanLiteral", 
      "stringLiteral", "dateTimeLiteral", "simplePositiveUnaryTestOp", "comparisonOp", 
      "quantorOp", "intervalStart", "intervalEnd", "qualifiedName", "$accept", 
      "expression", "textualExpression", "boxedExpression", "functionDefinition", 
      "forExpression", "ifExpression", "quantifiedExpression", "disjunction", 
      "conjunction", "comparison", "arithmeticExpression", "instanceOf", "pathExpression", 
      "filterExpression", "functionInvocation", "literal", "textualExpressions", 
      "addition", "subtraction", "multiplication", "division", "exponentiation", 
      "arithmeticNegation", "simpleExpression", "simpleExpressions", "closedIntervalStart", 
      "closedIntervalEnd", "positiveUnaryTest", "positiveUnaryTests", "unaryTests", 
      "parameters", "namedParameters", "expressionList", "namedParameter", "parameterName", 
      "inParts", "inPart", "type", "list", "context", "formalParameterList", 
      "formalParameter", "contextEntries", "contextEntry", "key", };

  static FeelParser() {
    states[0] = new State(new int[]{6,11,14,61,4,15,7,17,47,19,48,28,49,32,5,182,10,42,11,43,12,44,13,45,19,183,22,57,21,151,30,206,45,120,35,128,37,133,40,146,41,147,23,157,29,180,3,-2,25,-41,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5},new int[]{-1,1,-2,3,-3,4,-4,59,-5,7,-6,8,-7,60,-8,10,-10,14,-9,16,-11,18,-17,36,-12,40,-15,46,-44,55,-19,211,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(new int[]{25,5,3,-66});
    states[5] = new State(new int[]{6,11,14,12,4,15,7,17,47,19,48,28,49,32,5,39,10,42,11,43,12,44,13,45,19,56,22,57,21,58,25,-41,3,-41,20,-41,26,-45,28,-50},new int[]{-4,6,-5,7,-6,8,-7,9,-8,10,-10,14,-9,16,-11,18,-17,36,-12,40,-15,46,-44,55});
    states[6] = new State(-64);
    states[7] = new State(-42);
    states[8] = new State(-80);
    states[9] = new State(-82);
    states[10] = new State(-103);
    states[11] = new State(-112);
    states[12] = new State(new int[]{6,13});
    states[13] = new State(-113);
    states[14] = new State(-104);
    states[15] = new State(-108);
    states[16] = new State(-105);
    states[17] = new State(-110);
    states[18] = new State(-106);
    states[19] = new State(new int[]{19,20,32,23});
    states[20] = new State(new int[]{4,15,20,-107},new int[]{-10,21});
    states[21] = new State(new int[]{20,22});
    states[22] = new State(-192);
    states[23] = new State(new int[]{48,24});
    states[24] = new State(new int[]{19,25});
    states[25] = new State(new int[]{4,15,20,-107},new int[]{-10,26});
    states[26] = new State(new int[]{20,27});
    states[27] = new State(-194);
    states[28] = new State(new int[]{19,29});
    states[29] = new State(new int[]{4,15,20,-107},new int[]{-10,30});
    states[30] = new State(new int[]{20,31});
    states[31] = new State(-193);
    states[32] = new State(new int[]{19,33});
    states[33] = new State(new int[]{4,15,20,-107},new int[]{-10,34});
    states[34] = new State(new int[]{20,35});
    states[35] = new State(-195);
    states[36] = new State(new int[]{26,37,25,-83,3,-83,31,-83,32,-83,34,-83,33,-83,15,-83,14,-83,17,-83,16,-83,18,-83,43,-83,21,-83,9,-83,8,-83,10,-83,11,-83,12,-83,13,-83,19,-83,45,-83,35,-83,37,-83,40,-83,41,-83,23,-83,6,-83,4,-83,7,-83,47,-83,48,-83,49,-83,29,-83,5,-83,22,-83,28,-83,20,-83,38,-83,39,-83,24,-83,36,-83,42,-83});
    states[37] = new State(new int[]{5,38});
    states[38] = new State(-86);
    states[39] = new State(-85);
    states[40] = new State(new int[]{6,11,14,12,4,15,7,17,47,19,48,28,49,32,5,39,25,-79,3,-79,31,-79,32,-79,34,-79,33,-79,15,-79,17,-79,16,-79,18,-79,43,-79,26,-79,21,-79,9,-79,8,-79,10,-79,11,-79,12,-79,13,-79,19,-79,45,-79,35,-79,37,-79,40,-79,41,-79,23,-79,29,-79,22,-79,28,-79,20,-79,38,-79,39,-79,24,-79,36,-79,42,-79},new int[]{-5,41,-6,8,-7,9,-8,10,-10,14,-9,16,-11,18,-17,36});
    states[41] = new State(-43);
    states[42] = new State(-46);
    states[43] = new State(-47);
    states[44] = new State(-48);
    states[45] = new State(-49);
    states[46] = new State(new int[]{6,11,14,12,4,15,7,17,47,19,48,28,49,32,5,39,28,-79,26,-84},new int[]{-5,47,-6,8,-7,9,-8,10,-10,14,-9,16,-11,18,-17,36});
    states[47] = new State(new int[]{28,48});
    states[48] = new State(new int[]{6,11,14,12,4,15,7,17,47,19,48,28,49,32,5,39,20,-79,21,-79,22,-79,25,-79,3,-79,31,-79,32,-79,34,-79,33,-79,15,-79,17,-79,16,-79,18,-79,43,-79,26,-79,9,-79,8,-79,10,-79,11,-79,12,-79,13,-79,19,-79,45,-79,35,-79,37,-79,40,-79,41,-79,23,-79,29,-79,28,-79,38,-79,39,-79,24,-79,36,-79,42,-79},new int[]{-5,49,-6,8,-7,9,-8,10,-10,14,-9,16,-11,18,-17,36});
    states[49] = new State(new int[]{20,52,21,53,22,54,25,-56,3,-56,31,-56,32,-56,34,-56,33,-56,15,-56,14,-56,17,-56,16,-56,18,-56,43,-56,26,-56,9,-56,8,-56,10,-56,11,-56,12,-56,13,-56,19,-56,45,-56,35,-56,37,-56,40,-56,41,-56,23,-56,6,-56,4,-56,7,-56,47,-56,48,-56,49,-56,29,-56,5,-56,28,-56,38,-56,39,-56,24,-56,36,-56,42,-56},new int[]{-16,50,-45,51});
    states[50] = new State(-44);
    states[51] = new State(-57);
    states[52] = new State(-60);
    states[53] = new State(-61);
    states[54] = new State(-58);
    states[55] = new State(-51);
    states[56] = new State(-54);
    states[57] = new State(-55);
    states[58] = new State(-52);
    states[59] = new State(new int[]{25,-63,3,-22,31,-22,32,-22,34,-22,33,-22,15,-22,14,-22,17,-22,16,-22,18,-22,43,-22,26,-22,21,-22,9,-22,8,-22,10,-22,11,-22,12,-22,13,-22,19,-22,45,-22,35,-22,37,-22,40,-22,41,-22,23,-22,6,-22,4,-22,7,-22,47,-22,48,-22,49,-22,29,-22,5,-22,22,-22,28,-22});
    states[60] = new State(-82);
    states[61] = new State(new int[]{6,62,45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,3,-5,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5},new int[]{-19,63,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[62] = new State(-112);
    states[63] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-98,35,-98,37,-98,40,-98,41,-98,23,-98,6,-98,4,-98,7,-98,47,-98,48,-98,49,-98,29,-98,5,-98,22,-98,28,-98,3,-98,20,-98,25,-98,38,-98,39,-98,24,-98,36,-98,42,-98},new int[]{-13,68,-49,103});
    states[64] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,3,-5,20,-5,25,-5,38,-5,39,-5,24,-5,36,-5,42,-5},new int[]{-19,65,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[65] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,22,-116,28,-116,3,-116,20,-116,25,-116,38,-116,39,-116,24,-116,36,-116,42,-116},new int[]{-13,68,-49,103});
    states[66] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,3,-5,20,-5,25,-5,38,-5,39,-5,24,-5,36,-5,42,-5},new int[]{-19,67,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[67] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,22,-116,28,-116,3,-116,20,-116,25,-116,38,-116,39,-116,24,-116,36,-116,42,-116},new int[]{-13,68,-49,103});
    states[68] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,3,-5,20,-5,25,-5,38,-5,39,-5,24,-5,36,-5,42,-5},new int[]{-19,69,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[69] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,22,-116,28,-116,3,-116,20,-116,25,-116,38,-116,39,-116,24,-116,36,-116,42,-116},new int[]{-13,68,-49,103});
    states[70] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,32,-5,31,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5},new int[]{-19,71,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[71] = new State(new int[]{32,72,31,64,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,22,-116,28,-116},new int[]{-13,68,-49,103});
    states[72] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,3,-5,20,-5,25,-5,38,-5,39,-5,24,-5,36,-5,42,-5},new int[]{-19,73,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[73] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,22,-116,28,-116,3,-116,20,-116,25,-116,38,-116,39,-116,24,-116,36,-116,42,-116},new int[]{-13,68,-49,103});
    states[74] = new State(new int[]{19,80,6,11,14,12,4,15,7,17,47,19,48,28,49,32,5,39,10,42,11,43,12,44,13,45,22,57,21,58,29,79,25,-41,31,-41,32,-41,34,-41,33,-41,15,-41,17,-41,16,-41,18,-41,43,-41,26,-41,9,-41,8,-41,45,-41,35,-41,37,-41,40,-41,41,-41,23,-41,28,-41,3,-41,20,-41,38,-41,39,-41,24,-41,36,-41,42,-41},new int[]{-47,75,-46,83,-4,78,-5,7,-6,8,-7,9,-8,10,-10,14,-9,16,-11,18,-17,36,-12,40,-15,46,-44,55});
    states[75] = new State(new int[]{25,76,31,-149,32,-149,34,-149,33,-149,15,-149,14,-149,17,-149,16,-149,18,-149,43,-149,26,-149,21,-149,9,-149,8,-149,10,-149,11,-149,12,-149,13,-149,19,-149,45,-149,35,-149,37,-149,40,-149,41,-149,23,-149,6,-149,4,-149,7,-149,47,-149,48,-149,49,-149,29,-149,5,-149,22,-149,28,-149,3,-149,20,-149,38,-149,39,-149,24,-149,36,-149,42,-149});
    states[76] = new State(new int[]{6,11,14,12,4,15,7,17,47,19,48,28,49,32,5,39,10,42,11,43,12,44,13,45,19,56,22,57,21,58,29,79,25,-41,31,-41,32,-41,34,-41,33,-41,15,-41,17,-41,16,-41,18,-41,43,-41,26,-41,9,-41,8,-41,45,-41,35,-41,37,-41,40,-41,41,-41,23,-41,28,-41,3,-41,20,-41,38,-41,39,-41,24,-41,36,-41,42,-41},new int[]{-46,77,-4,78,-5,7,-6,8,-7,9,-8,10,-10,14,-9,16,-11,18,-17,36,-12,40,-15,46,-44,55});
    states[77] = new State(-74);
    states[78] = new State(-70);
    states[79] = new State(-71);
    states[80] = new State(new int[]{6,11,14,12,4,15,7,17,47,19,48,28,49,32,5,39,10,42,11,43,12,44,13,45,19,56,22,57,21,58,29,79,28,-50,26,-45,20,-41,25,-41},new int[]{-47,81,-46,83,-4,78,-5,7,-6,8,-7,9,-8,10,-10,14,-9,16,-11,18,-17,36,-12,40,-15,46,-44,55});
    states[81] = new State(new int[]{20,82,25,76});
    states[82] = new State(-150);
    states[83] = new State(-73);
    states[84] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,3,-5,20,-5,25,-5,38,-5,39,-5,24,-5,36,-5,42,-5},new int[]{-19,85,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[85] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-88,35,-88,37,-88,40,-88,41,-88,23,-88,6,-88,4,-88,7,-88,47,-88,48,-88,49,-88,29,-88,5,-88,22,-88,28,-88,3,-88,20,-88,25,-88,38,-88,39,-88,24,-88,36,-88,42,-88},new int[]{-13,68,-49,103});
    states[86] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,3,-5,20,-5,25,-5,38,-5,39,-5,24,-5,36,-5,42,-5},new int[]{-19,87,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[87] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-90,35,-90,37,-90,40,-90,41,-90,23,-90,6,-90,4,-90,7,-90,47,-90,48,-90,49,-90,29,-90,5,-90,22,-90,28,-90,3,-90,20,-90,25,-90,38,-90,39,-90,24,-90,36,-90,42,-90},new int[]{-13,68,-49,103});
    states[88] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,3,-5,20,-5,25,-5,38,-5,39,-5,24,-5,36,-5,42,-5},new int[]{-19,89,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[89] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-92,35,-92,37,-92,40,-92,41,-92,23,-92,6,-92,4,-92,7,-92,47,-92,48,-92,49,-92,29,-92,5,-92,22,-92,28,-92,3,-92,20,-92,25,-92,38,-92,39,-92,24,-92,36,-92,42,-92},new int[]{-13,68,-49,103});
    states[90] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,3,-5,20,-5,25,-5,38,-5,39,-5,24,-5,36,-5,42,-5},new int[]{-19,91,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[91] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-94,35,-94,37,-94,40,-94,41,-94,23,-94,6,-94,4,-94,7,-94,47,-94,48,-94,49,-94,29,-94,5,-94,22,-94,28,-94,3,-94,20,-94,25,-94,38,-94,39,-94,24,-94,36,-94,42,-94},new int[]{-13,68,-49,103});
    states[92] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,3,-5,20,-5,25,-5,38,-5,39,-5,24,-5,36,-5,42,-5},new int[]{-19,93,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[93] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-96,35,-96,37,-96,40,-96,41,-96,23,-96,6,-96,4,-96,7,-96,47,-96,48,-96,49,-96,29,-96,5,-96,22,-96,28,-96,3,-96,20,-96,25,-96,38,-96,39,-96,24,-96,36,-96,42,-96},new int[]{-13,68,-49,103});
    states[94] = new State(new int[]{44,95});
    states[95] = new State(new int[]{5,39,31,-84,32,-84,34,-84,33,-84,15,-84,14,-84,17,-84,16,-84,18,-84,43,-84,26,-84,21,-84,9,-84,8,-84,10,-84,11,-84,12,-84,13,-84,19,-84,45,-84,35,-84,37,-84,40,-84,41,-84,23,-84,6,-84,4,-84,7,-84,47,-84,48,-84,49,-84,29,-84,22,-84,28,-84,3,-84,20,-84,25,-84,38,-84,39,-84,24,-84,36,-84,42,-84},new int[]{-56,96,-17,97});
    states[96] = new State(-161);
    states[97] = new State(new int[]{26,37,31,-163,32,-163,34,-163,33,-163,15,-163,14,-163,17,-163,16,-163,18,-163,43,-163,21,-163,9,-163,8,-163,10,-163,11,-163,12,-163,13,-163,19,-163,45,-163,35,-163,37,-163,40,-163,41,-163,23,-163,6,-163,4,-163,7,-163,47,-163,48,-163,49,-163,29,-163,5,-163,22,-163,28,-163,3,-163,20,-163,25,-163,38,-163,39,-163,24,-163,36,-163,42,-163});
    states[98] = new State(new int[]{5,99});
    states[99] = new State(-127);
    states[100] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5},new int[]{-19,101,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[101] = new State(new int[]{22,102,31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,28,-116},new int[]{-13,68,-49,103});
    states[102] = new State(-159);
    states[103] = new State(-115);
    states[104] = new State(-152);
    states[105] = new State(-153);
    states[106] = new State(-154);
    states[107] = new State(-155);
    states[108] = new State(-156);
    states[109] = new State(-157);
    states[110] = new State(new int[]{5,205,45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,10,42,11,43,12,44,13,45,19,183,22,57,20,-5,25,-5,27,-124,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5},new int[]{-50,111,-51,202,-52,204,-53,115,-19,190,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[111] = new State(new int[]{20,112,25,113});
    states[112] = new State(-117);
    states[113] = new State(new int[]{5,200,20,-122,25,-122,27,-124},new int[]{-52,114,-53,115});
    states[114] = new State(-121);
    states[115] = new State(new int[]{27,116});
    states[116] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,20,-5,25,-5},new int[]{-19,117,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[117] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,20,-116,25,-116,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,22,-116,28,-116},new int[]{-13,68,-49,103});
    states[118] = new State(-6);
    states[119] = new State(-9);
    states[120] = new State(new int[]{19,121});
    states[121] = new State(new int[]{5,200,20,-124,25,-124},new int[]{-59,122,-60,201,-53,199});
    states[122] = new State(new int[]{20,123,25,197});
    states[123] = new State(new int[]{46,125,45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,3,-5,20,-5,25,-5,38,-5,39,-5,24,-5,36,-5,42,-5},new int[]{-19,124,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[124] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,22,-116,28,-116,3,-116,20,-116,25,-116,38,-116,39,-116,24,-116,36,-116,42,-116},new int[]{-13,68,-49,103});
    states[125] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,3,-5,20,-5,25,-5,38,-5,39,-5,24,-5,36,-5,42,-5},new int[]{-19,126,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[126] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,22,-116,28,-116,3,-116,20,-116,25,-116,38,-116,39,-116,24,-116,36,-116,42,-116},new int[]{-13,68,-49,103});
    states[127] = new State(-10);
    states[128] = new State(new int[]{5,193,36,-137,25,-137},new int[]{-54,129,-55,196});
    states[129] = new State(new int[]{36,130,25,191});
    states[130] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,3,-5,20,-5,25,-5,38,-5,39,-5,24,-5,36,-5,42,-5},new int[]{-19,131,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[131] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,22,-116,28,-116,3,-116,20,-116,25,-116,38,-116,39,-116,24,-116,36,-116,42,-116},new int[]{-13,68,-49,103});
    states[132] = new State(-11);
    states[133] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,38,-5,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5},new int[]{-19,134,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[134] = new State(new int[]{38,135,31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,22,-116,28,-116},new int[]{-13,68,-49,103});
    states[135] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,39,-5,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5},new int[]{-19,136,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[136] = new State(new int[]{39,137,31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,22,-116,28,-116},new int[]{-13,68,-49,103});
    states[137] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,3,-5,20,-5,25,-5,38,-5,39,-5,24,-5,36,-5,42,-5},new int[]{-19,138,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[138] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,22,-116,28,-116,3,-116,20,-116,25,-116,38,-116,39,-116,24,-116,36,-116,42,-116},new int[]{-13,68,-49,103});
    states[139] = new State(-12);
    states[140] = new State(new int[]{5,141});
    states[141] = new State(new int[]{33,142});
    states[142] = new State(new int[]{5,193,42,-137,25,-137},new int[]{-54,143,-55,196});
    states[143] = new State(new int[]{42,144,25,191});
    states[144] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,3,-5,20,-5,25,-5,38,-5,39,-5,24,-5,36,-5,42,-5},new int[]{-19,145,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[145] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,22,-116,28,-116,3,-116,20,-116,25,-116,38,-116,39,-116,24,-116,36,-116,42,-116},new int[]{-13,68,-49,103});
    states[146] = new State(-135);
    states[147] = new State(-136);
    states[148] = new State(-13);
    states[149] = new State(-7);
    states[150] = new State(-165);
    states[151] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,28,-5,26,-5,25,-5,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,9,-5,8,-5},new int[]{-51,152,-19,190,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[152] = new State(new int[]{22,153,25,154});
    states[153] = new State(-169);
    states[154] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,20,-5,25,-5},new int[]{-19,155,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[155] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,20,-116,25,-116,22,-116,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,28,-116},new int[]{-13,68,-49,103});
    states[156] = new State(-167);
    states[157] = new State(new int[]{5,187,4,15,24,-183,25,-183,27,-107},new int[]{-61,158,-62,189,-63,162,-10,188});
    states[158] = new State(new int[]{24,159,25,160});
    states[159] = new State(-182);
    states[160] = new State(new int[]{5,187,4,15,24,-186,25,-186,27,-107},new int[]{-62,161,-63,162,-10,188});
    states[161] = new State(-185);
    states[162] = new State(new int[]{27,163});
    states[163] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,24,-5,25,-5},new int[]{-19,164,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[164] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,24,-116,25,-116,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,22,-116,28,-116},new int[]{-13,68,-49,103});
    states[165] = new State(-14);
    states[166] = new State(-15);
    states[167] = new State(-16);
    states[168] = new State(-29);
    states[169] = new State(-30);
    states[170] = new State(-31);
    states[171] = new State(-32);
    states[172] = new State(-33);
    states[173] = new State(-34);
    states[174] = new State(new int[]{6,62,45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,3,-5,20,-5,25,-5,38,-5,39,-5,24,-5,36,-5,42,-5},new int[]{-19,63,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[175] = new State(-17);
    states[176] = new State(-18);
    states[177] = new State(-19);
    states[178] = new State(-20);
    states[179] = new State(-21);
    states[180] = new State(-101);
    states[181] = new State(-22);
    states[182] = new State(-23);
    states[183] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,28,-5,26,-5,20,-5,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,9,-5,8,-5},new int[]{-20,184,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-19,186,-27,165,-21,149,-57,150,-58,156,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[184] = new State(new int[]{20,185,31,-6,32,-6,34,-6,33,-6,15,-6,14,-6,17,-6,16,-6,18,-6,43,-6,26,-6,21,-6,9,-6,8,-6,10,-6,11,-6,12,-6,13,-6,19,-6,45,-6,35,-6,37,-6,40,-6,41,-6,23,-6,6,-6,4,-6,7,-6,47,-6,48,-6,49,-6,29,-6,5,-6,22,-6,28,-6});
    states[185] = new State(-24);
    states[186] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,22,-116,28,-116,20,-116},new int[]{-13,68,-49,103});
    states[187] = new State(-189);
    states[188] = new State(-190);
    states[189] = new State(-184);
    states[190] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,20,-116,25,-116,22,-116,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,28,-116},new int[]{-13,68,-49,103});
    states[191] = new State(new int[]{5,193,36,-140,25,-140,42,-140},new int[]{-55,192});
    states[192] = new State(-139);
    states[193] = new State(new int[]{33,194});
    states[194] = new State(new int[]{45,120,35,128,37,133,40,146,41,147,21,151,23,157,14,174,6,11,4,15,7,17,47,19,48,28,49,32,29,180,5,182,10,42,11,43,12,44,13,45,19,183,22,57,31,-5,32,-5,34,-5,33,-5,15,-5,17,-5,16,-5,18,-5,43,-5,26,-5,9,-5,8,-5,28,-5,36,-5,25,-5,42,-5},new int[]{-19,195,-20,118,-22,119,-23,127,-24,132,-25,139,-14,140,-26,148,-21,149,-57,150,-58,156,-27,165,-28,166,-29,167,-36,168,-37,169,-38,170,-39,171,-40,172,-41,173,-30,175,-31,176,-32,177,-33,178,-34,179,-7,60,-8,10,-10,14,-9,16,-11,18,-4,181,-5,7,-6,8,-17,36,-12,40,-15,46,-44,55});
    states[195] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,36,-116,25,-116,42,-116,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,22,-116,28,-116},new int[]{-13,68,-49,103});
    states[196] = new State(-138);
    states[197] = new State(new int[]{5,200,20,-124,25,-124},new int[]{-60,198,-53,199});
    states[198] = new State(-178);
    states[199] = new State(-180);
    states[200] = new State(-125);
    states[201] = new State(-177);
    states[202] = new State(new int[]{20,203,25,154});
    states[203] = new State(-118);
    states[204] = new State(-120);
    states[205] = new State(new int[]{27,-125,26,-23,31,-23,32,-23,34,-23,33,-23,15,-23,14,-23,17,-23,16,-23,18,-23,43,-23,21,-23,9,-23,8,-23,10,-23,11,-23,12,-23,13,-23,19,-23,45,-23,35,-23,37,-23,40,-23,41,-23,23,-23,6,-23,4,-23,7,-23,47,-23,48,-23,49,-23,29,-23,5,-23,22,-23,28,-23,20,-23,25,-23});
    states[206] = new State(new int[]{19,207});
    states[207] = new State(new int[]{6,11,14,12,4,15,7,17,47,19,48,28,49,32,5,39,10,42,11,43,12,44,13,45,19,56,22,57,21,58,20,-41,25,-41,26,-45,28,-50},new int[]{-3,208,-4,210,-5,7,-6,8,-7,9,-8,10,-10,14,-9,16,-11,18,-17,36,-12,40,-15,46,-44,55});
    states[208] = new State(new int[]{20,209,25,5});
    states[209] = new State(-67);
    states[210] = new State(-63);
    states[211] = new State(new int[]{31,64,32,66,34,70,33,74,15,84,14,86,17,88,16,90,18,92,43,94,26,98,21,100,9,104,8,105,10,106,11,107,12,108,13,109,19,110,3,-4,45,-116,35,-116,37,-116,40,-116,41,-116,23,-116,6,-116,4,-116,7,-116,47,-116,48,-116,49,-116,29,-116,5,-116,22,-116,28,-116},new int[]{-13,68,-49,103});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-18, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-2});
    rules[4] = new Rule(-1, new int[]{-19});
    rules[5] = new Rule(-19, new int[]{});
    rules[6] = new Rule(-19, new int[]{-20});
    rules[7] = new Rule(-19, new int[]{-21});
    rules[8] = new Rule(-20, new int[]{});
    rules[9] = new Rule(-20, new int[]{-22});
    rules[10] = new Rule(-20, new int[]{-23});
    rules[11] = new Rule(-20, new int[]{-24});
    rules[12] = new Rule(-20, new int[]{-25});
    rules[13] = new Rule(-20, new int[]{-26});
    rules[14] = new Rule(-20, new int[]{-27});
    rules[15] = new Rule(-20, new int[]{-28});
    rules[16] = new Rule(-20, new int[]{-29});
    rules[17] = new Rule(-20, new int[]{-30});
    rules[18] = new Rule(-20, new int[]{-31});
    rules[19] = new Rule(-20, new int[]{-32});
    rules[20] = new Rule(-20, new int[]{-33});
    rules[21] = new Rule(-20, new int[]{-34});
    rules[22] = new Rule(-20, new int[]{-4});
    rules[23] = new Rule(-20, new int[]{5});
    rules[24] = new Rule(-20, new int[]{19,-20,20});
    rules[25] = new Rule(-35, new int[]{});
    rules[26] = new Rule(-35, new int[]{-20});
    rules[27] = new Rule(-35, new int[]{-35,25,-20});
    rules[28] = new Rule(-29, new int[]{});
    rules[29] = new Rule(-29, new int[]{-36});
    rules[30] = new Rule(-29, new int[]{-37});
    rules[31] = new Rule(-29, new int[]{-38});
    rules[32] = new Rule(-29, new int[]{-39});
    rules[33] = new Rule(-29, new int[]{-40});
    rules[34] = new Rule(-29, new int[]{-41});
    rules[35] = new Rule(-42, new int[]{});
    rules[36] = new Rule(-42, new int[]{-29});
    rules[37] = new Rule(-42, new int[]{-6});
    rules[38] = new Rule(-43, new int[]{});
    rules[39] = new Rule(-43, new int[]{-42});
    rules[40] = new Rule(-43, new int[]{-43,25,-42});
    rules[41] = new Rule(-4, new int[]{});
    rules[42] = new Rule(-4, new int[]{-5});
    rules[43] = new Rule(-4, new int[]{-12,-5});
    rules[44] = new Rule(-4, new int[]{-15,-5,28,-5,-16});
    rules[45] = new Rule(-12, new int[]{});
    rules[46] = new Rule(-12, new int[]{10});
    rules[47] = new Rule(-12, new int[]{11});
    rules[48] = new Rule(-12, new int[]{12});
    rules[49] = new Rule(-12, new int[]{13});
    rules[50] = new Rule(-15, new int[]{});
    rules[51] = new Rule(-15, new int[]{-44});
    rules[52] = new Rule(-15, new int[]{21});
    rules[53] = new Rule(-44, new int[]{});
    rules[54] = new Rule(-44, new int[]{19});
    rules[55] = new Rule(-44, new int[]{22});
    rules[56] = new Rule(-16, new int[]{});
    rules[57] = new Rule(-16, new int[]{-45});
    rules[58] = new Rule(-16, new int[]{22});
    rules[59] = new Rule(-45, new int[]{});
    rules[60] = new Rule(-45, new int[]{20});
    rules[61] = new Rule(-45, new int[]{21});
    rules[62] = new Rule(-3, new int[]{});
    rules[63] = new Rule(-3, new int[]{-4});
    rules[64] = new Rule(-3, new int[]{-3,25,-4});
    rules[65] = new Rule(-2, new int[]{});
    rules[66] = new Rule(-2, new int[]{-3});
    rules[67] = new Rule(-2, new int[]{30,19,-3,20});
    rules[68] = new Rule(-2, new int[]{14});
    rules[69] = new Rule(-46, new int[]{});
    rules[70] = new Rule(-46, new int[]{-4});
    rules[71] = new Rule(-46, new int[]{29});
    rules[72] = new Rule(-47, new int[]{});
    rules[73] = new Rule(-47, new int[]{-46});
    rules[74] = new Rule(-47, new int[]{-47,25,-46});
    rules[75] = new Rule(-48, new int[]{});
    rules[76] = new Rule(-48, new int[]{-47});
    rules[77] = new Rule(-48, new int[]{30,19,-47,20});
    rules[78] = new Rule(-48, new int[]{14});
    rules[79] = new Rule(-5, new int[]{});
    rules[80] = new Rule(-5, new int[]{-6});
    rules[81] = new Rule(-6, new int[]{});
    rules[82] = new Rule(-6, new int[]{-7});
    rules[83] = new Rule(-6, new int[]{-17});
    rules[84] = new Rule(-17, new int[]{});
    rules[85] = new Rule(-17, new int[]{5});
    rules[86] = new Rule(-17, new int[]{-17,26,5});
    rules[87] = new Rule(-36, new int[]{});
    rules[88] = new Rule(-36, new int[]{-19,15,-19});
    rules[89] = new Rule(-37, new int[]{});
    rules[90] = new Rule(-37, new int[]{-19,14,-19});
    rules[91] = new Rule(-38, new int[]{});
    rules[92] = new Rule(-38, new int[]{-19,17,-19});
    rules[93] = new Rule(-39, new int[]{});
    rules[94] = new Rule(-39, new int[]{-19,16,-19});
    rules[95] = new Rule(-40, new int[]{});
    rules[96] = new Rule(-40, new int[]{-19,18,-19});
    rules[97] = new Rule(-41, new int[]{});
    rules[98] = new Rule(-41, new int[]{14,-19});
    rules[99] = new Rule(-34, new int[]{});
    rules[100] = new Rule(-34, new int[]{-7});
    rules[101] = new Rule(-34, new int[]{29});
    rules[102] = new Rule(-7, new int[]{});
    rules[103] = new Rule(-7, new int[]{-8});
    rules[104] = new Rule(-7, new int[]{-10});
    rules[105] = new Rule(-7, new int[]{-9});
    rules[106] = new Rule(-7, new int[]{-11});
    rules[107] = new Rule(-10, new int[]{});
    rules[108] = new Rule(-10, new int[]{4});
    rules[109] = new Rule(-9, new int[]{});
    rules[110] = new Rule(-9, new int[]{7});
    rules[111] = new Rule(-8, new int[]{});
    rules[112] = new Rule(-8, new int[]{6});
    rules[113] = new Rule(-8, new int[]{14,6});
    rules[114] = new Rule(-33, new int[]{});
    rules[115] = new Rule(-33, new int[]{-19,-49});
    rules[116] = new Rule(-49, new int[]{});
    rules[117] = new Rule(-49, new int[]{19,-50,20});
    rules[118] = new Rule(-49, new int[]{19,-51,20});
    rules[119] = new Rule(-50, new int[]{});
    rules[120] = new Rule(-50, new int[]{-52});
    rules[121] = new Rule(-50, new int[]{-50,25,-52});
    rules[122] = new Rule(-52, new int[]{});
    rules[123] = new Rule(-52, new int[]{-53,27,-19});
    rules[124] = new Rule(-53, new int[]{});
    rules[125] = new Rule(-53, new int[]{5});
    rules[126] = new Rule(-31, new int[]{});
    rules[127] = new Rule(-31, new int[]{-19,26,5});
    rules[128] = new Rule(-23, new int[]{});
    rules[129] = new Rule(-23, new int[]{35,-54,36,-19});
    rules[130] = new Rule(-24, new int[]{});
    rules[131] = new Rule(-24, new int[]{37,-19,38,-19,39,-19});
    rules[132] = new Rule(-25, new int[]{});
    rules[133] = new Rule(-25, new int[]{-14,5,33,-54,42,-19});
    rules[134] = new Rule(-14, new int[]{});
    rules[135] = new Rule(-14, new int[]{40});
    rules[136] = new Rule(-14, new int[]{41});
    rules[137] = new Rule(-54, new int[]{});
    rules[138] = new Rule(-54, new int[]{-55});
    rules[139] = new Rule(-54, new int[]{-54,25,-55});
    rules[140] = new Rule(-55, new int[]{});
    rules[141] = new Rule(-55, new int[]{5,33,-19});
    rules[142] = new Rule(-26, new int[]{});
    rules[143] = new Rule(-26, new int[]{-19,31,-19});
    rules[144] = new Rule(-27, new int[]{});
    rules[145] = new Rule(-27, new int[]{-19,32,-19});
    rules[146] = new Rule(-28, new int[]{});
    rules[147] = new Rule(-28, new int[]{-19,-13,-19});
    rules[148] = new Rule(-28, new int[]{-19,34,-19,32,-19});
    rules[149] = new Rule(-28, new int[]{-19,33,-47});
    rules[150] = new Rule(-28, new int[]{-19,33,19,-47,20});
    rules[151] = new Rule(-13, new int[]{});
    rules[152] = new Rule(-13, new int[]{9});
    rules[153] = new Rule(-13, new int[]{8});
    rules[154] = new Rule(-13, new int[]{10});
    rules[155] = new Rule(-13, new int[]{11});
    rules[156] = new Rule(-13, new int[]{12});
    rules[157] = new Rule(-13, new int[]{13});
    rules[158] = new Rule(-32, new int[]{});
    rules[159] = new Rule(-32, new int[]{-19,21,-19,22});
    rules[160] = new Rule(-30, new int[]{});
    rules[161] = new Rule(-30, new int[]{-19,43,44,-56});
    rules[162] = new Rule(-56, new int[]{});
    rules[163] = new Rule(-56, new int[]{-17});
    rules[164] = new Rule(-21, new int[]{});
    rules[165] = new Rule(-21, new int[]{-57});
    rules[166] = new Rule(-21, new int[]{-22});
    rules[167] = new Rule(-21, new int[]{-58});
    rules[168] = new Rule(-57, new int[]{});
    rules[169] = new Rule(-57, new int[]{21,-51,22});
    rules[170] = new Rule(-51, new int[]{});
    rules[171] = new Rule(-51, new int[]{-19});
    rules[172] = new Rule(-51, new int[]{-51,25,-19});
    rules[173] = new Rule(-22, new int[]{});
    rules[174] = new Rule(-22, new int[]{45,19,-59,20,-19});
    rules[175] = new Rule(-22, new int[]{45,19,-59,20,46,-19});
    rules[176] = new Rule(-59, new int[]{});
    rules[177] = new Rule(-59, new int[]{-60});
    rules[178] = new Rule(-59, new int[]{-59,25,-60});
    rules[179] = new Rule(-60, new int[]{});
    rules[180] = new Rule(-60, new int[]{-53});
    rules[181] = new Rule(-58, new int[]{});
    rules[182] = new Rule(-58, new int[]{23,-61,24});
    rules[183] = new Rule(-61, new int[]{});
    rules[184] = new Rule(-61, new int[]{-62});
    rules[185] = new Rule(-61, new int[]{-61,25,-62});
    rules[186] = new Rule(-62, new int[]{});
    rules[187] = new Rule(-62, new int[]{-63,27,-19});
    rules[188] = new Rule(-63, new int[]{});
    rules[189] = new Rule(-63, new int[]{5});
    rules[190] = new Rule(-63, new int[]{-10});
    rules[191] = new Rule(-11, new int[]{});
    rules[192] = new Rule(-11, new int[]{47,19,-10,20});
    rules[193] = new Rule(-11, new int[]{48,19,-10,20});
    rules[194] = new Rule(-11, new int[]{47,32,48,19,-10,20});
    rules[195] = new Rule(-11, new int[]{49,19,-10,20});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 3: // main -> simpleUnaryTests
{ Debug("main/simpleUnaryTests");	Root = ValueStack[ValueStack.Depth-1].lg; }
        break;
      case 4: // main -> expression
{ Debug("main/expression");			Root = ValueStack[ValueStack.Depth-1]; }
        break;
      case 6: // expression -> textualExpression
{ Debug("expression/text");	CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 7: // expression -> boxedExpression
{ Debug("expression/box");	CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 9: // textualExpression -> functionDefinition
{ Debug("textualExpression/funDef");	CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 10: // textualExpression -> forExpression
{ Debug("textualExpression/for");		CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 11: // textualExpression -> ifExpression
{ Debug("textualExpression/if");		CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 12: // textualExpression -> quantifiedExpression
{ Debug("textualExpression/quan");		CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 13: // textualExpression -> disjunction
{ Debug("textualExpression/disj");		CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 14: // textualExpression -> conjunction
{ Debug("textualExpression/conj");		CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 15: // textualExpression -> comparison
{ Debug("textualExpression/comp");		CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 16: // textualExpression -> arithmeticExpression
{ Debug("textualExpression/arith");		CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 17: // textualExpression -> instanceOf
{ Debug("textualExpression/inst");		CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 18: // textualExpression -> pathExpression
{ Debug("textualExpression/path");		CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 19: // textualExpression -> filterExpression
{ Debug("textualExpression/filt");		CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 20: // textualExpression -> functionInvocation
{ Debug("textualExpression/funInv");	CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 21: // textualExpression -> literal
{ Debug("textualExpression/lit");		CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 22: // textualExpression -> simplePositiveUnaryTest
{ Debug("textualExpression/spUT");		CurrentSemanticValue = ValueStack[ValueStack.Depth-1].lg; }
        break;
      case 23: // textualExpression -> NAME
{ Debug("textualExpression/name");		CurrentSemanticValue = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 24: // textualExpression -> P_OPEN, textualExpression, P_CLOSE
{ Debug("textualExpression/braces");	CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 26: // textualExpressions -> textualExpression
{ Debug("textualExpressions");	 CurrentSemanticValue = ValueStack[ValueStack.Depth-1];				}
        break;
      case 27: // textualExpressions -> textualExpressions, COMMA, textualExpression
{ Debug("textualExpressions/,"); CurrentSemanticValue = new Or(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]);	}
        break;
      case 29: // arithmeticExpression -> addition
{ Debug("arithmeticExpression/add"); CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 30: // arithmeticExpression -> subtraction
{ Debug("arithmeticExpression/sub"); CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 31: // arithmeticExpression -> multiplication
{ Debug("arithmeticExpression/mul"); CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 32: // arithmeticExpression -> division
{ Debug("arithmeticExpression/div"); CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 33: // arithmeticExpression -> exponentiation
{ Debug("arithmeticExpression/pow"); CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 34: // arithmeticExpression -> arithmeticNegation
{ Debug("arithmeticExpression/neg"); CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 36: // simpleExpression -> arithmeticExpression
{ Debug("simpleExpression/arith");	CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 37: // simpleExpression -> simpleValue
{ Debug("simpleExpression/simVal");	CurrentSemanticValue = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 39: // simpleExpressions -> simpleExpression
{ Debug("simpleExpressions");	CurrentSemanticValue = ValueStack[ValueStack.Depth-1];			 }
        break;
      case 40: // simpleExpressions -> simpleExpressions, COMMA, simpleExpression
{ Debug("simpleExpressions/,"); CurrentSemanticValue = new Or(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 42: // simplePositiveUnaryTest -> endpoint
{ Debug("simplePositiveUnaryTest");		CurrentSemanticValue.lg = new Comparison(ComparisonOperator.Equal, new InputValue(), ValueStack[ValueStack.Depth-1].nd); }
        break;
      case 43: // simplePositiveUnaryTest -> simplePositiveUnaryTestOp, endpoint
{ Debug("simplePositiveUnaryTest/cmp");	CurrentSemanticValue.lg = new Comparison(ValueStack[ValueStack.Depth-2].co, new InputValue(), ValueStack[ValueStack.Depth-1].nd);						 }
        break;
      case 44: // simplePositiveUnaryTest -> intervalStart, endpoint, RANGE, endpoint, 
               //                            intervalEnd
{ Debug("simplePositiveUnaryTest/rng");	CurrentSemanticValue.lg = new Range(ValueStack[ValueStack.Depth-5].b, ValueStack[ValueStack.Depth-1].b, ValueStack[ValueStack.Depth-4].nd, ValueStack[ValueStack.Depth-2].nd, new InputValue());					 }
        break;
      case 46: // simplePositiveUnaryTestOp -> C_LT
{ CurrentSemanticValue.co = ComparisonOperator.LessThan;			  }
        break;
      case 47: // simplePositiveUnaryTestOp -> C_LE
{ CurrentSemanticValue.co = ComparisonOperator.LessThanOrEqual;	  }
        break;
      case 48: // simplePositiveUnaryTestOp -> C_GT
{ CurrentSemanticValue.co = ComparisonOperator.GreaterThan;		  }
        break;
      case 49: // simplePositiveUnaryTestOp -> C_GE
{ CurrentSemanticValue.co = ComparisonOperator.GreaterThanOrEqual; }
        break;
      case 51: // intervalStart -> closedIntervalStart
{ CurrentSemanticValue.b = false; }
        break;
      case 52: // intervalStart -> SP_OPEN
{ CurrentSemanticValue.b = true;  }
        break;
      case 57: // intervalEnd -> closedIntervalEnd
{ CurrentSemanticValue.b = false; }
        break;
      case 58: // intervalEnd -> SP_CLOSE
{ CurrentSemanticValue.b = true;  }
        break;
      case 63: // simplePositiveUnaryTests -> simplePositiveUnaryTest
{ Debug("simplePositiveUnaryTests");	CurrentSemanticValue.lg = ValueStack[ValueStack.Depth-1].lg;			 }
        break;
      case 64: // simplePositiveUnaryTests -> simplePositiveUnaryTests, COMMA, 
               //                             simplePositiveUnaryTest
{ Debug("simplePositiveUnaryTests/,");	CurrentSemanticValue.lg = new Or(ValueStack[ValueStack.Depth-3].lg, ValueStack[ValueStack.Depth-1].lg); }
        break;
      case 66: // simpleUnaryTests -> simplePositiveUnaryTests
{ Debug("simpleUnaryTests");		CurrentSemanticValue.lg = ValueStack[ValueStack.Depth-1].lg;						}
        break;
      case 67: // simpleUnaryTests -> NOT, P_OPEN, simplePositiveUnaryTests, P_CLOSE
{ Debug("simpleUnaryTests/not");	CurrentSemanticValue.lg = new Not(ValueStack[ValueStack.Depth-2].lg);				}
        break;
      case 68: // simpleUnaryTests -> OP_MINUS
{ Debug("simpleUnaryTests/-");		CurrentSemanticValue.lg = new BooleanLiteral(true);	}
        break;
      case 73: // positiveUnaryTests -> positiveUnaryTest
{ Debug("positiveUnaryTests");	 CurrentSemanticValue = ValueStack[ValueStack.Depth-1];			  }
        break;
      case 74: // positiveUnaryTests -> positiveUnaryTests, COMMA, positiveUnaryTest
{ Debug("positiveUnaryTests/,"); CurrentSemanticValue = new Or(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 76: // unaryTests -> positiveUnaryTests
{ Debug("unaryTests");		CurrentSemanticValue = ValueStack[ValueStack.Depth-1];					   }
        break;
      case 77: // unaryTests -> NOT, P_OPEN, positiveUnaryTests, P_CLOSE
{ Debug("unaryTests/not");	CurrentSemanticValue = new Not(ValueStack[ValueStack.Depth-2]);			   }
        break;
      case 78: // unaryTests -> OP_MINUS
{ Debug("unaryTests/-");	CurrentSemanticValue = new BooleanLiteral(true); }
        break;
      case 80: // endpoint -> simpleValue
{ Debug("endpoint/value"); CurrentSemanticValue.nd = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 82: // simpleValue -> simpleLiteral
{ Debug("simpleValue/lit");	CurrentSemanticValue.nd = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 83: // simpleValue -> qualifiedName
{ Debug("simpleValue/qn");	CurrentSemanticValue.nd = ValueStack[ValueStack.Depth-1].qn; }
        break;
      case 85: // qualifiedName -> NAME
{ CurrentSemanticValue.qn = new QualifiedName(ValueStack[ValueStack.Depth-1].s);		}
        break;
      case 86: // qualifiedName -> qualifiedName, DOT, NAME
{ CurrentSemanticValue.qn = ValueStack[ValueStack.Depth-3].qn;	CurrentSemanticValue.qn.AddComponent(ValueStack[ValueStack.Depth-1].s);	}
        break;
      case 88: // addition -> expression, OP_PLUS, expression
{ Debug("addition");  CurrentSemanticValue = new Add(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 90: // subtraction -> expression, OP_MINUS, expression
{ Debug("subtraction");  CurrentSemanticValue = new Sub(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 92: // multiplication -> expression, OP_MUL, expression
{ Debug("multiplication");  CurrentSemanticValue = new Mul(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 94: // division -> expression, OP_DIV, expression
{ Debug("division");  CurrentSemanticValue = new Div(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 96: // exponentiation -> expression, OP_POW, expression
{ Debug("exponentiation");  CurrentSemanticValue = new Pow(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 98: // arithmeticNegation -> OP_MINUS, expression
{ Debug("exponentiation");  CurrentSemanticValue = new Neg(ValueStack[ValueStack.Depth-1]); }
        break;
      case 103: // simpleLiteral -> numericLiteral
{ Debug("simpleLiteral/num");	CurrentSemanticValue.nd = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 104: // simpleLiteral -> stringLiteral
{ Debug("simpleLiteral/str");	CurrentSemanticValue.nd = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 105: // simpleLiteral -> booleanLiteral
{ Debug("simpleLiteral/bool");	CurrentSemanticValue.nd = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 106: // simpleLiteral -> dateTimeLiteral
{ Debug("simpleLiteral/dt");	CurrentSemanticValue.nd = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 108: // stringLiteral -> STRING
{ CurrentSemanticValue.nd = new StringLiteral(ValueStack[ValueStack.Depth-1].s); }
        break;
      case 110: // booleanLiteral -> BOOLEAN
{ CurrentSemanticValue.nd = new BooleanLiteral(ValueStack[ValueStack.Depth-1].b); }
        break;
      case 112: // numericLiteral -> NUMBER
{ Debug("numericLiteral");     CurrentSemanticValue.nd = new NumericLiteral( ValueStack[ValueStack.Depth-1].n); }
        break;
      case 113: // numericLiteral -> OP_MINUS, NUMBER
{ Debug("numericLiteral/neg"); CurrentSemanticValue.nd = new NumericLiteral(-ValueStack[ValueStack.Depth-1].n); }
        break;
      case 115: // functionInvocation -> expression, parameters
{ Debug("functionInvocation");	CurrentSemanticValue = new FunctionInvocation(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 117: // parameters -> P_OPEN, namedParameters, P_CLOSE
{ Debug("parameters/named");	CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 118: // parameters -> P_OPEN, expressionList, P_CLOSE
{ Debug("parameters/pos");		CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 120: // namedParameters -> namedParameter
{ Debug("namedParameters");	  CurrentSemanticValue = new NamedParamList(ValueStack[ValueStack.Depth-1]); }
        break;
      case 121: // namedParameters -> namedParameters, COMMA, namedParameter
{ Debug("namedParameters/,"); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; CurrentSemanticValue.Add(ValueStack[ValueStack.Depth-1]);		   }
        break;
      case 123: // namedParameter -> parameterName, COLON, expression
{ Debug("namedParameter");	  CurrentSemanticValue = new NamedParam(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 125: // parameterName -> NAME
{ Debug("parameterName");		CurrentSemanticValue = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 127: // pathExpression -> expression, DOT, NAME
{ Debug("pathExpression"); CurrentSemanticValue = new PathExpression(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1].s); }
        break;
      case 129: // forExpression -> FOR, inParts, RETURN, expression
{ Debug("forExpression");  CurrentSemanticValue = new For(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 131: // ifExpression -> IF, expression, THEN, expression, ELSE, expression
{ Debug("ifExpression");  CurrentSemanticValue = new If(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 133: // quantifiedExpression -> quantorOp, NAME, IN, inParts, SATISFIES, expression
{ Debug("quantifiedExpression");  CurrentSemanticValue = new QuantifiedExpression(ValueStack[ValueStack.Depth-6].qo, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 135: // quantorOp -> SOME
{ CurrentSemanticValue.qo = QuantorOperator.Some;  }
        break;
      case 136: // quantorOp -> EVERY
{ CurrentSemanticValue.qo = QuantorOperator.EVERY; }
        break;
      case 138: // inParts -> inPart
{ Debug("inParts");   CurrentSemanticValue = new InPartList(ValueStack[ValueStack.Depth-1]); }
        break;
      case 139: // inParts -> inParts, COMMA, inPart
{ Debug("inParts/,"); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; CurrentSemanticValue.Add(ValueStack[ValueStack.Depth-1]);	   }
        break;
      case 141: // inPart -> NAME, IN, expression
{ Debug("inPart");   CurrentSemanticValue = new InPart(ValueStack[ValueStack.Depth-3].s, ValueStack[ValueStack.Depth-1]); }
        break;
      case 143: // disjunction -> expression, OR, expression
{ Debug("disjunction");  CurrentSemanticValue = new Or(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 145: // conjunction -> expression, AND, expression
{ Debug("conjunction");  CurrentSemanticValue = new And(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 147: // comparison -> expression, comparisonOp, expression
{ Debug("comparision/cmp");	 CurrentSemanticValue = new Comparison(ValueStack[ValueStack.Depth-2].co, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 148: // comparison -> expression, BETWEEN, expression, AND, expression
{ Debug("comparision/btw");	 CurrentSemanticValue = new Between(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3] ,ValueStack[ValueStack.Depth-1]);    }
        break;
      case 149: // comparison -> expression, IN, positiveUnaryTests
{ Debug("comparision/in");	 CurrentSemanticValue = new In(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]);			  }
        break;
      case 150: // comparison -> expression, IN, P_OPEN, positiveUnaryTests, P_CLOSE
{ Debug("comparision/P_in"); CurrentSemanticValue = new In(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-2]);			  }
        break;
      case 152: // comparisonOp -> C_NE
{ CurrentSemanticValue.co = ComparisonOperator.NotEqual;			  }
        break;
      case 153: // comparisonOp -> C_EQ
{ CurrentSemanticValue.co = ComparisonOperator.Equal;			  }
        break;
      case 154: // comparisonOp -> C_LT
{ CurrentSemanticValue.co = ComparisonOperator.LessThan;			  }
        break;
      case 155: // comparisonOp -> C_LE
{ CurrentSemanticValue.co = ComparisonOperator.LessThanOrEqual;	  }
        break;
      case 156: // comparisonOp -> C_GT
{ CurrentSemanticValue.co = ComparisonOperator.GreaterThan;		  }
        break;
      case 157: // comparisonOp -> C_GE
{ CurrentSemanticValue.co = ComparisonOperator.GreaterThanOrEqual; }
        break;
      case 159: // filterExpression -> expression, SP_OPEN, expression, SP_CLOSE
{ Debug("filterExpression"); CurrentSemanticValue = new Filter(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 161: // instanceOf -> expression, INSTANCE, OF, type
{ Debug("instanceOf"); CurrentSemanticValue = new InstanceOf(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-1]); }
        break;
      case 163: // type -> qualifiedName
{ Debug("type"); CurrentSemanticValue = ValueStack[ValueStack.Depth-1].qn; }
        break;
      case 165: // boxedExpression -> list
{ Debug("boxedExpression/list");	CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 166: // boxedExpression -> functionDefinition
{ Debug("boxedExpression/funDef");  CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 167: // boxedExpression -> context
{ Debug("boxedExpression/context"); CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 171: // expressionList -> expression
{ Debug("expressionList");   CurrentSemanticValue = new ExpressionList(ValueStack[ValueStack.Depth-1]); }
        break;
      case 172: // expressionList -> expressionList, COMMA, expression
{ Debug("expressionList/,"); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; CurrentSemanticValue.Add(ValueStack[ValueStack.Depth-1]);		  }
        break;
      case 177: // formalParameterList -> formalParameter
{ Debug("formatParameterList/,"); CurrentSemanticValue = new FormalParameterList(ValueStack[ValueStack.Depth-1]); }
        break;
      case 178: // formalParameterList -> formalParameterList, COMMA, formalParameter
{ Debug("formatParameterList/,"); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; CurrentSemanticValue.Add(ValueStack[ValueStack.Depth-1]);		  }
        break;
      case 180: // formalParameter -> parameterName
{ Debug("formalParameter"); CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 184: // contextEntries -> contextEntry
{ Debug("contextEntries/,"); CurrentSemanticValue = new ContextEntryList(ValueStack[ValueStack.Depth-1]); }
        break;
      case 185: // contextEntries -> contextEntries, COMMA, contextEntry
{ Debug("contextEntries/,"); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; CurrentSemanticValue.Add(ValueStack[ValueStack.Depth-1]);			}
        break;
      case 187: // contextEntry -> key, COLON, expression
{ Debug("contextEntry");	CurrentSemanticValue = new KeyValue(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 189: // key -> NAME
{ Debug("key/name");	CurrentSemanticValue = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 190: // key -> stringLiteral
{ Debug("key/strLit");	CurrentSemanticValue = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 192: // dateTimeLiteral -> DATE, P_OPEN, stringLiteral, P_CLOSE
{ CurrentSemanticValue.nd = DateTimeLiteral.ParseDate(((StringLiteral) ValueStack[ValueStack.Depth-2].nd).Value);		 }
        break;
      case 193: // dateTimeLiteral -> TIME, P_OPEN, stringLiteral, P_CLOSE
{ CurrentSemanticValue.nd = DateTimeLiteral.ParseTime(((StringLiteral) ValueStack[ValueStack.Depth-2].nd).Value);		 }
        break;
      case 194: // dateTimeLiteral -> DATE, AND, TIME, P_OPEN, stringLiteral, P_CLOSE
{ CurrentSemanticValue.nd = DateTimeLiteral.ParseDateAndTime(((StringLiteral) ValueStack[ValueStack.Depth-2].nd).Value); }
        break;
      case 195: // dateTimeLiteral -> DURATION, P_OPEN, stringLiteral, P_CLOSE
{ CurrentSemanticValue.nd = TimeSpanLiteral.Parse(((StringLiteral) ValueStack[ValueStack.Depth-2].nd).Value);			 }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


// The use code section.
// It is empty, because use code goes in a partial class.
}
}
