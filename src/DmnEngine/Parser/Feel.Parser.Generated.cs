// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  CABINET
// DateTime: 7/1/2016 1:09:59 AM
// UserName: Andrey
// Input file <Parser\Feel.Language.grammar.y - 7/1/2016 12:56:35 AM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using Softengi.DmnEngine.Ast;

namespace Softengi.DmnEngine.Parser
{
internal enum Token {error=2,EOF=3,STRING=4,NAME=5,NUMBER=6,
    BOOLEAN=7,C_EQ=8,C_NE=9,C_LT=10,C_LE=11,C_GT=12,
    C_GE=13,OP_MINUS=14,OP_PLUS=15,OP_DIV=16,OP_MUL=17,OP_POW=18,
    P_OPEN=19,P_CLOSE=20,SP_OPEN=21,SP_CLOSE=22,CP_OPEN=23,CP_CLOSE=24,
    COMMA=25,DOT=26,COLON=27,RANGE=28,NULL=29,NOT=30,
    OR=31,AND=32,IN=33,BETWEEN=34,FOR=35,RETURN=36,
    IF=37,THEN=38,ELSE=39,SOME=40,EVERY=41,SATISFIES=42,
    INSTANCE=43,OF=44,FUNCTION=45,EXTERNAL=46,DATE=47,TIME=48,
    DURATION=49,UNARY_START=50,EXPRESSION_START=51};

internal partial struct ValueType
{ 
			public decimal n; 
			public string s; 
			public bool b;
			public QualifiedName qn;

			public INode nd;
			public IExpression ex;
			public ILogical lg;

			public ComparisonOperator co;
			public QuantorOperator qo;

			public ExpressionList el;
	   }
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class FeelParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[129];
  private static State[] states = new State[208];
  private static string[] nonTerms = new string[] {
      "endpoint", "literal", "simpleValue", "simpleLiteral", "numericLiteral", 
      "booleanLiteral", "stringLiteral", "dateTimeLiteral", "functionInvocation", 
      "expression", "textualExpression", "boxedExpression", "functionDefinition", 
      "forExpression", "ifExpression", "quantifiedExpression", "disjunction", 
      "conjunction", "arithmeticExpression", "pathExpression", "filterExpression", 
      "unaryTests", "positiveUnaryTests", "positiveUnaryTest", "simpleUnaryTests", 
      "simplePositiveUnaryTests", "simplePositiveUnaryTest", "instanceOf", "comparison", 
      "simpleExpressions", "simplePositiveUnaryTestOp", "comparisonOp", "quantorOp", 
      "intervalStart", "intervalEnd", "qualifiedName", "main", "$accept", "textualExpressions", 
      "addition", "subtraction", "multiplication", "division", "exponentiation", 
      "arithmeticNegation", "simpleExpression", "closedIntervalStart", "closedIntervalEnd", 
      "parameters", "namedParameters", "expressionList", "namedParameter", "inParts", 
      "inPart", "contextEntries", "nameList", "contextEntry", "key", };

  static FeelParser() {
    states[0] = new State(new int[]{50,3,51,66},new int[]{-37,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{6,12,14,61,4,16,7,18,47,20,48,29,49,33,5,40,10,43,11,44,12,45,13,46,19,57,22,58,21,59,30,62},new int[]{-25,4,-26,5,-27,60,-1,8,-3,9,-4,10,-5,11,-7,15,-6,17,-8,19,-36,37,-31,41,-34,47,-47,56});
    states[4] = new State(-2);
    states[5] = new State(new int[]{25,6,3,-51});
    states[6] = new State(new int[]{6,12,14,13,4,16,7,18,47,20,48,29,49,33,5,40,10,43,11,44,12,45,13,46,19,57,22,58,21,59},new int[]{-27,7,-1,8,-3,9,-4,10,-5,11,-7,15,-6,17,-8,19,-36,37,-31,41,-34,47,-47,56});
    states[7] = new State(-50);
    states[8] = new State(-34);
    states[9] = new State(-61);
    states[10] = new State(-62);
    states[11] = new State(-74);
    states[12] = new State(-80);
    states[13] = new State(new int[]{6,14});
    states[14] = new State(-81);
    states[15] = new State(-75);
    states[16] = new State(-78);
    states[17] = new State(-76);
    states[18] = new State(-79);
    states[19] = new State(-77);
    states[20] = new State(new int[]{19,21,32,24});
    states[21] = new State(new int[]{4,16},new int[]{-7,22});
    states[22] = new State(new int[]{20,23});
    states[23] = new State(-125);
    states[24] = new State(new int[]{48,25});
    states[25] = new State(new int[]{19,26});
    states[26] = new State(new int[]{4,16},new int[]{-7,27});
    states[27] = new State(new int[]{20,28});
    states[28] = new State(-127);
    states[29] = new State(new int[]{19,30});
    states[30] = new State(new int[]{4,16},new int[]{-7,31});
    states[31] = new State(new int[]{20,32});
    states[32] = new State(-126);
    states[33] = new State(new int[]{19,34});
    states[34] = new State(new int[]{4,16},new int[]{-7,35});
    states[35] = new State(new int[]{20,36});
    states[36] = new State(-128);
    states[37] = new State(new int[]{26,38,25,-63,3,-63,20,-63,31,-63,32,-63,34,-63,33,-63,15,-63,14,-63,17,-63,16,-63,18,-63,43,-63,21,-63,9,-63,8,-63,10,-63,11,-63,12,-63,13,-63,19,-63,22,-63,38,-63,39,-63,24,-63,36,-63,42,-63,28,-63});
    states[38] = new State(new int[]{5,39});
    states[39] = new State(-65);
    states[40] = new State(-64);
    states[41] = new State(new int[]{6,12,14,13,4,16,7,18,47,20,48,29,49,33,5,40},new int[]{-1,42,-3,9,-4,10,-5,11,-7,15,-6,17,-8,19,-36,37});
    states[42] = new State(-35);
    states[43] = new State(-37);
    states[44] = new State(-38);
    states[45] = new State(-39);
    states[46] = new State(-40);
    states[47] = new State(new int[]{6,12,14,13,4,16,7,18,47,20,48,29,49,33,5,40},new int[]{-1,48,-3,9,-4,10,-5,11,-7,15,-6,17,-8,19,-36,37});
    states[48] = new State(new int[]{28,49});
    states[49] = new State(new int[]{6,12,14,13,4,16,7,18,47,20,48,29,49,33,5,40},new int[]{-1,50,-3,9,-4,10,-5,11,-7,15,-6,17,-8,19,-36,37});
    states[50] = new State(new int[]{20,53,21,54,22,55},new int[]{-35,51,-48,52});
    states[51] = new State(-36);
    states[52] = new State(-45);
    states[53] = new State(-47);
    states[54] = new State(-48);
    states[55] = new State(-46);
    states[56] = new State(-41);
    states[57] = new State(-43);
    states[58] = new State(-44);
    states[59] = new State(-42);
    states[60] = new State(-49);
    states[61] = new State(new int[]{6,14,3,-53});
    states[62] = new State(new int[]{19,63});
    states[63] = new State(new int[]{6,12,14,13,4,16,7,18,47,20,48,29,49,33,5,40,10,43,11,44,12,45,13,46,19,57,22,58,21,59},new int[]{-26,64,-27,60,-1,8,-3,9,-4,10,-5,11,-7,15,-6,17,-8,19,-36,37,-31,41,-34,47,-47,56});
    states[64] = new State(new int[]{20,65,25,6});
    states[65] = new State(-52);
    states[66] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,67,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[67] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,3,-3},new int[]{-32,72,-49,106});
    states[68] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,69,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[69] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,3,-97,22,-97,20,-97,25,-97,38,-97,39,-97,24,-97,36,-97,42,-97},new int[]{-32,72,-49,106});
    states[70] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,71,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[71] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,3,-98,22,-98,20,-98,25,-98,38,-98,39,-98,24,-98,36,-98,42,-98},new int[]{-32,72,-49,106});
    states[72] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,73,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[73] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,3,-99,22,-99,20,-99,25,-99,38,-99,39,-99,24,-99,36,-99,42,-99},new int[]{-32,72,-49,106});
    states[74] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,75,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[75] = new State(new int[]{32,76,31,68,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113},new int[]{-32,72,-49,106});
    states[76] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,77,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[77] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,3,-100,22,-100,20,-100,25,-100,38,-100,39,-100,24,-100,36,-100,42,-100},new int[]{-32,72,-49,106});
    states[78] = new State(new int[]{19,84,6,12,14,13,4,16,7,18,47,20,48,29,49,33,5,40,10,43,11,44,12,45,13,46,22,58,21,59,29,83},new int[]{-23,79,-24,87,-27,82,-1,8,-3,9,-4,10,-5,11,-7,15,-6,17,-8,19,-36,37,-31,41,-34,47,-47,56});
    states[79] = new State(new int[]{25,80,31,-101,32,-101,34,-101,33,-101,15,-101,14,-101,17,-101,16,-101,18,-101,43,-101,26,-101,21,-101,9,-101,8,-101,10,-101,11,-101,12,-101,13,-101,19,-101,3,-101,22,-101,20,-101,38,-101,39,-101,24,-101,36,-101,42,-101});
    states[80] = new State(new int[]{6,12,14,13,4,16,7,18,47,20,48,29,49,33,5,40,10,43,11,44,12,45,13,46,19,57,22,58,21,59,29,83},new int[]{-24,81,-27,82,-1,8,-3,9,-4,10,-5,11,-7,15,-6,17,-8,19,-36,37,-31,41,-34,47,-47,56});
    states[81] = new State(-57);
    states[82] = new State(-54);
    states[83] = new State(-55);
    states[84] = new State(new int[]{6,12,14,13,4,16,7,18,47,20,48,29,49,33,5,40,10,43,11,44,12,45,13,46,19,57,22,58,21,59,29,83},new int[]{-23,85,-24,87,-27,82,-1,8,-3,9,-4,10,-5,11,-7,15,-6,17,-8,19,-36,37,-31,41,-34,47,-47,56});
    states[85] = new State(new int[]{20,86,25,80});
    states[86] = new State(-102);
    states[87] = new State(-56);
    states[88] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,89,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[89] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,3,-66,22,-66,20,-66,25,-66,38,-66,39,-66,24,-66,36,-66,42,-66},new int[]{-32,72,-49,106});
    states[90] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,91,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[91] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,3,-67,22,-67,20,-67,25,-67,38,-67,39,-67,24,-67,36,-67,42,-67},new int[]{-32,72,-49,106});
    states[92] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,93,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[93] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,3,-68,22,-68,20,-68,25,-68,38,-68,39,-68,24,-68,36,-68,42,-68},new int[]{-32,72,-49,106});
    states[94] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,95,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[95] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,3,-69,22,-69,20,-69,25,-69,38,-69,39,-69,24,-69,36,-69,42,-69},new int[]{-32,72,-49,106});
    states[96] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,97,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[97] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,3,-70,22,-70,20,-70,25,-70,38,-70,39,-70,24,-70,36,-70,42,-70},new int[]{-32,72,-49,106});
    states[98] = new State(new int[]{44,99});
    states[99] = new State(new int[]{5,40},new int[]{-36,100});
    states[100] = new State(new int[]{26,38,31,-110,32,-110,34,-110,33,-110,15,-110,14,-110,17,-110,16,-110,18,-110,43,-110,21,-110,9,-110,8,-110,10,-110,11,-110,12,-110,13,-110,19,-110,3,-110,22,-110,20,-110,25,-110,38,-110,39,-110,24,-110,36,-110,42,-110});
    states[101] = new State(new int[]{5,102});
    states[102] = new State(-88);
    states[103] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,104,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[104] = new State(new int[]{22,105,31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113},new int[]{-32,72,-49,106});
    states[105] = new State(-109);
    states[106] = new State(-82);
    states[107] = new State(-103);
    states[108] = new State(-104);
    states[109] = new State(-105);
    states[110] = new State(-106);
    states[111] = new State(-107);
    states[112] = new State(-108);
    states[113] = new State(new int[]{5,207,45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-50,114,-51,204,-52,206,-10,194,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[114] = new State(new int[]{20,115,25,116});
    states[115] = new State(-83);
    states[116] = new State(new int[]{5,118},new int[]{-52,117});
    states[117] = new State(-86);
    states[118] = new State(new int[]{27,119});
    states[119] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,120,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[120] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,20,-87,25,-87},new int[]{-32,72,-49,106});
    states[121] = new State(-4);
    states[122] = new State(-6);
    states[123] = new State(new int[]{19,124});
    states[124] = new State(new int[]{5,203},new int[]{-56,125});
    states[125] = new State(new int[]{20,126,25,201});
    states[126] = new State(new int[]{46,128,45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,127,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[127] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,3,-116,22,-116,20,-116,25,-116,38,-116,39,-116,24,-116,36,-116,42,-116},new int[]{-32,72,-49,106});
    states[128] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,129,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[129] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,3,-117,22,-117,20,-117,25,-117,38,-117,39,-117,24,-117,36,-117,42,-117},new int[]{-32,72,-49,106});
    states[130] = new State(-7);
    states[131] = new State(new int[]{5,197},new int[]{-53,132,-54,200});
    states[132] = new State(new int[]{36,133,25,195});
    states[133] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,134,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[134] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,3,-89,22,-89,20,-89,25,-89,38,-89,39,-89,24,-89,36,-89,42,-89},new int[]{-32,72,-49,106});
    states[135] = new State(-8);
    states[136] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,137,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[137] = new State(new int[]{38,138,31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113},new int[]{-32,72,-49,106});
    states[138] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,139,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[139] = new State(new int[]{39,140,31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113},new int[]{-32,72,-49,106});
    states[140] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,141,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[141] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,3,-90,22,-90,20,-90,25,-90,38,-90,39,-90,24,-90,36,-90,42,-90},new int[]{-32,72,-49,106});
    states[142] = new State(-9);
    states[143] = new State(new int[]{5,144});
    states[144] = new State(new int[]{33,145});
    states[145] = new State(new int[]{5,197},new int[]{-53,146,-54,200});
    states[146] = new State(new int[]{42,147,25,195});
    states[147] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,148,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[148] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,3,-91,22,-91,20,-91,25,-91,38,-91,39,-91,24,-91,36,-91,42,-91},new int[]{-32,72,-49,106});
    states[149] = new State(-92);
    states[150] = new State(-93);
    states[151] = new State(-10);
    states[152] = new State(-5);
    states[153] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-51,154,-10,194,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[154] = new State(new int[]{22,155,25,156});
    states[155] = new State(-111);
    states[156] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,157,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[157] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,20,-115,25,-115,22,-115},new int[]{-32,72,-49,106});
    states[158] = new State(new int[]{5,191,4,16},new int[]{-55,159,-57,193,-58,163,-7,192});
    states[159] = new State(new int[]{24,160,25,161});
    states[160] = new State(-112);
    states[161] = new State(new int[]{5,191,4,16},new int[]{-57,162,-58,163,-7,192});
    states[162] = new State(-121);
    states[163] = new State(new int[]{27,164});
    states[164] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,165,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[165] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,24,-122,25,-122},new int[]{-32,72,-49,106});
    states[166] = new State(-11);
    states[167] = new State(-12);
    states[168] = new State(-13);
    states[169] = new State(-24);
    states[170] = new State(-25);
    states[171] = new State(-26);
    states[172] = new State(-27);
    states[173] = new State(-28);
    states[174] = new State(-29);
    states[175] = new State(new int[]{6,177,45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,176,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[176] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,3,-71,22,-71,20,-71,25,-71,38,-71,39,-71,24,-71,36,-71,42,-71},new int[]{-32,72,-49,106});
    states[177] = new State(-80);
    states[178] = new State(-14);
    states[179] = new State(-15);
    states[180] = new State(-16);
    states[181] = new State(-17);
    states[182] = new State(-18);
    states[183] = new State(-62);
    states[184] = new State(-73);
    states[185] = new State(-19);
    states[186] = new State(-20);
    states[187] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-11,188,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-10,190,-18,166,-12,152,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[188] = new State(new int[]{20,189,31,-4,32,-4,34,-4,33,-4,15,-4,14,-4,17,-4,16,-4,18,-4,43,-4,26,-4,21,-4,9,-4,8,-4,10,-4,11,-4,12,-4,13,-4,19,-4});
    states[189] = new State(-21);
    states[190] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113},new int[]{-32,72,-49,106});
    states[191] = new State(-123);
    states[192] = new State(-124);
    states[193] = new State(-120);
    states[194] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,20,-114,25,-114,22,-114},new int[]{-32,72,-49,106});
    states[195] = new State(new int[]{5,197},new int[]{-54,196});
    states[196] = new State(-95);
    states[197] = new State(new int[]{33,198});
    states[198] = new State(new int[]{45,123,35,131,37,136,40,149,41,150,21,153,23,158,14,175,6,12,4,16,7,18,47,20,48,29,49,33,29,184,5,186,10,43,11,44,12,45,13,46,19,187,22,58},new int[]{-10,199,-11,121,-13,122,-14,130,-15,135,-16,142,-33,143,-17,151,-12,152,-18,166,-29,167,-19,168,-40,169,-41,170,-42,171,-43,172,-44,173,-45,174,-28,178,-20,179,-21,180,-9,181,-2,182,-4,183,-5,11,-7,15,-6,17,-8,19,-27,185,-1,8,-3,9,-36,37,-31,41,-34,47,-47,56});
    states[199] = new State(new int[]{31,68,32,70,34,74,33,78,15,88,14,90,17,92,16,94,18,96,43,98,26,101,21,103,9,107,8,108,10,109,11,110,12,111,13,112,19,113,36,-96,25,-96,42,-96},new int[]{-32,72,-49,106});
    states[200] = new State(-94);
    states[201] = new State(new int[]{5,202});
    states[202] = new State(-119);
    states[203] = new State(-118);
    states[204] = new State(new int[]{20,205,25,156});
    states[205] = new State(-84);
    states[206] = new State(-85);
    states[207] = new State(new int[]{27,119,26,-20,31,-20,32,-20,34,-20,33,-20,15,-20,14,-20,17,-20,16,-20,18,-20,43,-20,21,-20,9,-20,8,-20,10,-20,11,-20,12,-20,13,-20,19,-20,20,-20,25,-20});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-38, new int[]{-37,3});
    rules[2] = new Rule(-37, new int[]{50,-25});
    rules[3] = new Rule(-37, new int[]{51,-10});
    rules[4] = new Rule(-10, new int[]{-11});
    rules[5] = new Rule(-10, new int[]{-12});
    rules[6] = new Rule(-11, new int[]{-13});
    rules[7] = new Rule(-11, new int[]{-14});
    rules[8] = new Rule(-11, new int[]{-15});
    rules[9] = new Rule(-11, new int[]{-16});
    rules[10] = new Rule(-11, new int[]{-17});
    rules[11] = new Rule(-11, new int[]{-18});
    rules[12] = new Rule(-11, new int[]{-29});
    rules[13] = new Rule(-11, new int[]{-19});
    rules[14] = new Rule(-11, new int[]{-28});
    rules[15] = new Rule(-11, new int[]{-20});
    rules[16] = new Rule(-11, new int[]{-21});
    rules[17] = new Rule(-11, new int[]{-9});
    rules[18] = new Rule(-11, new int[]{-2});
    rules[19] = new Rule(-11, new int[]{-27});
    rules[20] = new Rule(-11, new int[]{5});
    rules[21] = new Rule(-11, new int[]{19,-11,20});
    rules[22] = new Rule(-39, new int[]{-11});
    rules[23] = new Rule(-39, new int[]{-39,25,-11});
    rules[24] = new Rule(-19, new int[]{-40});
    rules[25] = new Rule(-19, new int[]{-41});
    rules[26] = new Rule(-19, new int[]{-42});
    rules[27] = new Rule(-19, new int[]{-43});
    rules[28] = new Rule(-19, new int[]{-44});
    rules[29] = new Rule(-19, new int[]{-45});
    rules[30] = new Rule(-46, new int[]{-19});
    rules[31] = new Rule(-46, new int[]{-3});
    rules[32] = new Rule(-30, new int[]{-46});
    rules[33] = new Rule(-30, new int[]{-30,25,-46});
    rules[34] = new Rule(-27, new int[]{-1});
    rules[35] = new Rule(-27, new int[]{-31,-1});
    rules[36] = new Rule(-27, new int[]{-34,-1,28,-1,-35});
    rules[37] = new Rule(-31, new int[]{10});
    rules[38] = new Rule(-31, new int[]{11});
    rules[39] = new Rule(-31, new int[]{12});
    rules[40] = new Rule(-31, new int[]{13});
    rules[41] = new Rule(-34, new int[]{-47});
    rules[42] = new Rule(-34, new int[]{21});
    rules[43] = new Rule(-47, new int[]{19});
    rules[44] = new Rule(-47, new int[]{22});
    rules[45] = new Rule(-35, new int[]{-48});
    rules[46] = new Rule(-35, new int[]{22});
    rules[47] = new Rule(-48, new int[]{20});
    rules[48] = new Rule(-48, new int[]{21});
    rules[49] = new Rule(-26, new int[]{-27});
    rules[50] = new Rule(-26, new int[]{-26,25,-27});
    rules[51] = new Rule(-25, new int[]{-26});
    rules[52] = new Rule(-25, new int[]{30,19,-26,20});
    rules[53] = new Rule(-25, new int[]{14});
    rules[54] = new Rule(-24, new int[]{-27});
    rules[55] = new Rule(-24, new int[]{29});
    rules[56] = new Rule(-23, new int[]{-24});
    rules[57] = new Rule(-23, new int[]{-23,25,-24});
    rules[58] = new Rule(-22, new int[]{-23});
    rules[59] = new Rule(-22, new int[]{30,19,-23,20});
    rules[60] = new Rule(-22, new int[]{14});
    rules[61] = new Rule(-1, new int[]{-3});
    rules[62] = new Rule(-3, new int[]{-4});
    rules[63] = new Rule(-3, new int[]{-36});
    rules[64] = new Rule(-36, new int[]{5});
    rules[65] = new Rule(-36, new int[]{-36,26,5});
    rules[66] = new Rule(-40, new int[]{-10,15,-10});
    rules[67] = new Rule(-41, new int[]{-10,14,-10});
    rules[68] = new Rule(-42, new int[]{-10,17,-10});
    rules[69] = new Rule(-43, new int[]{-10,16,-10});
    rules[70] = new Rule(-44, new int[]{-10,18,-10});
    rules[71] = new Rule(-45, new int[]{14,-10});
    rules[72] = new Rule(-2, new int[]{-4});
    rules[73] = new Rule(-2, new int[]{29});
    rules[74] = new Rule(-4, new int[]{-5});
    rules[75] = new Rule(-4, new int[]{-7});
    rules[76] = new Rule(-4, new int[]{-6});
    rules[77] = new Rule(-4, new int[]{-8});
    rules[78] = new Rule(-7, new int[]{4});
    rules[79] = new Rule(-6, new int[]{7});
    rules[80] = new Rule(-5, new int[]{6});
    rules[81] = new Rule(-5, new int[]{14,6});
    rules[82] = new Rule(-9, new int[]{-10,-49});
    rules[83] = new Rule(-49, new int[]{19,-50,20});
    rules[84] = new Rule(-49, new int[]{19,-51,20});
    rules[85] = new Rule(-50, new int[]{-52});
    rules[86] = new Rule(-50, new int[]{-50,25,-52});
    rules[87] = new Rule(-52, new int[]{5,27,-10});
    rules[88] = new Rule(-20, new int[]{-10,26,5});
    rules[89] = new Rule(-14, new int[]{35,-53,36,-10});
    rules[90] = new Rule(-15, new int[]{37,-10,38,-10,39,-10});
    rules[91] = new Rule(-16, new int[]{-33,5,33,-53,42,-10});
    rules[92] = new Rule(-33, new int[]{40});
    rules[93] = new Rule(-33, new int[]{41});
    rules[94] = new Rule(-53, new int[]{-54});
    rules[95] = new Rule(-53, new int[]{-53,25,-54});
    rules[96] = new Rule(-54, new int[]{5,33,-10});
    rules[97] = new Rule(-17, new int[]{-10,31,-10});
    rules[98] = new Rule(-18, new int[]{-10,32,-10});
    rules[99] = new Rule(-29, new int[]{-10,-32,-10});
    rules[100] = new Rule(-29, new int[]{-10,34,-10,32,-10});
    rules[101] = new Rule(-29, new int[]{-10,33,-23});
    rules[102] = new Rule(-29, new int[]{-10,33,19,-23,20});
    rules[103] = new Rule(-32, new int[]{9});
    rules[104] = new Rule(-32, new int[]{8});
    rules[105] = new Rule(-32, new int[]{10});
    rules[106] = new Rule(-32, new int[]{11});
    rules[107] = new Rule(-32, new int[]{12});
    rules[108] = new Rule(-32, new int[]{13});
    rules[109] = new Rule(-21, new int[]{-10,21,-10,22});
    rules[110] = new Rule(-28, new int[]{-10,43,44,-36});
    rules[111] = new Rule(-12, new int[]{21,-51,22});
    rules[112] = new Rule(-12, new int[]{23,-55,24});
    rules[113] = new Rule(-12, new int[]{-13});
    rules[114] = new Rule(-51, new int[]{-10});
    rules[115] = new Rule(-51, new int[]{-51,25,-10});
    rules[116] = new Rule(-13, new int[]{45,19,-56,20,-10});
    rules[117] = new Rule(-13, new int[]{45,19,-56,20,46,-10});
    rules[118] = new Rule(-56, new int[]{5});
    rules[119] = new Rule(-56, new int[]{-56,25,5});
    rules[120] = new Rule(-55, new int[]{-57});
    rules[121] = new Rule(-55, new int[]{-55,25,-57});
    rules[122] = new Rule(-57, new int[]{-58,27,-10});
    rules[123] = new Rule(-58, new int[]{5});
    rules[124] = new Rule(-58, new int[]{-7});
    rules[125] = new Rule(-8, new int[]{47,19,-7,20});
    rules[126] = new Rule(-8, new int[]{48,19,-7,20});
    rules[127] = new Rule(-8, new int[]{47,32,48,19,-7,20});
    rules[128] = new Rule(-8, new int[]{49,19,-7,20});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // main -> UNARY_START, simpleUnaryTests
{ Debug("main/unary");		Root = ValueStack[ValueStack.Depth-2]; }
        break;
      case 3: // main -> EXPRESSION_START, expression
{ Debug("main/expression");	Root = ValueStack[ValueStack.Depth-2]; }
        break;
      case 4: // expression -> textualExpression
{ Debug("expression/text");	CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 5: // expression -> boxedExpression
{ Debug("expression/box");	CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 6: // textualExpression -> functionDefinition
{ Debug("textualExpression/funDef");	CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 7: // textualExpression -> forExpression
{ Debug("textualExpression/for");		CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 8: // textualExpression -> ifExpression
{ Debug("textualExpression/if");		CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 9: // textualExpression -> quantifiedExpression
{ Debug("textualExpression/quan");		CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 10: // textualExpression -> disjunction
{ Debug("textualExpression/disj");		CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 11: // textualExpression -> conjunction
{ Debug("textualExpression/conj");		CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 12: // textualExpression -> comparison
{ Debug("textualExpression/comp");		CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].lg; }
        break;
      case 13: // textualExpression -> arithmeticExpression
{ Debug("textualExpression/arith");		CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 14: // textualExpression -> instanceOf
{ Debug("textualExpression/inst");		CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].lg; }
        break;
      case 15: // textualExpression -> pathExpression
{ Debug("textualExpression/path");		CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 16: // textualExpression -> filterExpression
{ Debug("textualExpression/filt");		CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 17: // textualExpression -> functionInvocation
{ Debug("textualExpression/funInv");	CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 18: // textualExpression -> literal
{ Debug("textualExpression/lit");		CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 19: // textualExpression -> simplePositiveUnaryTest
{ Debug("textualExpression/spUT");		CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].lg; }
        break;
      case 20: // textualExpression -> NAME
{ Debug("textualExpression/name");		CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 21: // textualExpression -> P_OPEN, textualExpression, P_CLOSE
{ Debug("textualExpression/braces");	CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex; }
        break;
      case 22: // textualExpressions -> textualExpression
{ Debug("textualExpressions");	 CurrentSemanticValue = ValueStack[ValueStack.Depth-1].ex;			  }
        break;
      case 23: // textualExpressions -> textualExpressions, COMMA, textualExpression
{ Debug("textualExpressions/,"); CurrentSemanticValue = new Or(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 24: // arithmeticExpression -> addition
{ Debug("arithmeticExpression/add"); CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1]; }
        break;
      case 25: // arithmeticExpression -> subtraction
{ Debug("arithmeticExpression/sub"); CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1]; }
        break;
      case 26: // arithmeticExpression -> multiplication
{ Debug("arithmeticExpression/mul"); CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1]; }
        break;
      case 27: // arithmeticExpression -> division
{ Debug("arithmeticExpression/div"); CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1]; }
        break;
      case 28: // arithmeticExpression -> exponentiation
{ Debug("arithmeticExpression/pow"); CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1]; }
        break;
      case 29: // arithmeticExpression -> arithmeticNegation
{ Debug("arithmeticExpression/neg"); CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1]; }
        break;
      case 30: // simpleExpression -> arithmeticExpression
{ Debug("simpleExpression/arith");	CurrentSemanticValue = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 31: // simpleExpression -> simpleValue
{ Debug("simpleExpression/simVal");	CurrentSemanticValue = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 32: // simpleExpressions -> simpleExpression
{ Debug("simpleExpressions");	CurrentSemanticValue.el = new ExpressionList(); CurrentSemanticValue.el.Add(ValueStack[ValueStack.Depth-1]); }
        break;
      case 33: // simpleExpressions -> simpleExpressions, COMMA, simpleExpression
{ Debug("simpleExpressions/,"); CurrentSemanticValue.el = ValueStack[ValueStack.Depth-3].el;				   CurrentSemanticValue.el.Add(ValueStack[ValueStack.Depth-1]); }
        break;
      case 34: // simplePositiveUnaryTest -> endpoint
{ Debug("simplePositiveUnaryTest");		CurrentSemanticValue.lg = new Comparison(ComparisonOperator.Equal, new InputValue(), ValueStack[ValueStack.Depth-1].nd); }
        break;
      case 35: // simplePositiveUnaryTest -> simplePositiveUnaryTestOp, endpoint
{ Debug("simplePositiveUnaryTest/cmp");	CurrentSemanticValue.lg = new Comparison(ValueStack[ValueStack.Depth-2].co, new InputValue(), ValueStack[ValueStack.Depth-1].nd);						 }
        break;
      case 36: // simplePositiveUnaryTest -> intervalStart, endpoint, RANGE, endpoint, 
               //                            intervalEnd
{ Debug("simplePositiveUnaryTest/rng");	CurrentSemanticValue.lg = new Range(ValueStack[ValueStack.Depth-5].b, ValueStack[ValueStack.Depth-1].b, ValueStack[ValueStack.Depth-4].nd, ValueStack[ValueStack.Depth-2].nd, new InputValue());					 }
        break;
      case 37: // simplePositiveUnaryTestOp -> C_LT
{ CurrentSemanticValue.co = ComparisonOperator.LessThan;			  }
        break;
      case 38: // simplePositiveUnaryTestOp -> C_LE
{ CurrentSemanticValue.co = ComparisonOperator.LessThanOrEqual;	  }
        break;
      case 39: // simplePositiveUnaryTestOp -> C_GT
{ CurrentSemanticValue.co = ComparisonOperator.GreaterThan;		  }
        break;
      case 40: // simplePositiveUnaryTestOp -> C_GE
{ CurrentSemanticValue.co = ComparisonOperator.GreaterThanOrEqual; }
        break;
      case 41: // intervalStart -> closedIntervalStart
{ CurrentSemanticValue.b = false; }
        break;
      case 42: // intervalStart -> SP_OPEN
{ CurrentSemanticValue.b = true;  }
        break;
      case 45: // intervalEnd -> closedIntervalEnd
{ CurrentSemanticValue.b = false; }
        break;
      case 46: // intervalEnd -> SP_CLOSE
{ CurrentSemanticValue.b = true;  }
        break;
      case 49: // simplePositiveUnaryTests -> simplePositiveUnaryTest
{ Debug("simplePositiveUnaryTests");	CurrentSemanticValue.lg = ValueStack[ValueStack.Depth-1].lg;			 }
        break;
      case 50: // simplePositiveUnaryTests -> simplePositiveUnaryTests, COMMA, 
               //                             simplePositiveUnaryTest
{ Debug("simplePositiveUnaryTests/,");	CurrentSemanticValue.lg = new Or(ValueStack[ValueStack.Depth-3].lg, ValueStack[ValueStack.Depth-1].lg); }
        break;
      case 51: // simpleUnaryTests -> simplePositiveUnaryTests
{ Debug("simpleUnaryTests");		CurrentSemanticValue.lg = ValueStack[ValueStack.Depth-1].lg;						}
        break;
      case 52: // simpleUnaryTests -> NOT, P_OPEN, simplePositiveUnaryTests, P_CLOSE
{ Debug("simpleUnaryTests/not");	CurrentSemanticValue.lg = new Not(ValueStack[ValueStack.Depth-2].lg);				}
        break;
      case 53: // simpleUnaryTests -> OP_MINUS
{ Debug("simpleUnaryTests/-");		CurrentSemanticValue.lg = new BooleanLiteral(true);	}
        break;
      case 56: // positiveUnaryTests -> positiveUnaryTest
{ Debug("positiveUnaryTests");	 CurrentSemanticValue.lg = ValueStack[ValueStack.Depth-1].lg;			  }
        break;
      case 57: // positiveUnaryTests -> positiveUnaryTests, COMMA, positiveUnaryTest
{ Debug("positiveUnaryTests/,"); CurrentSemanticValue.lg = new Or(ValueStack[ValueStack.Depth-3].lg, ValueStack[ValueStack.Depth-1].lg); }
        break;
      case 58: // unaryTests -> positiveUnaryTests
{ Debug("unaryTests");		CurrentSemanticValue.lg = ValueStack[ValueStack.Depth-1].lg;					   }
        break;
      case 59: // unaryTests -> NOT, P_OPEN, positiveUnaryTests, P_CLOSE
{ Debug("unaryTests/not");	CurrentSemanticValue.lg = new Not(ValueStack[ValueStack.Depth-2].lg);			   }
        break;
      case 60: // unaryTests -> OP_MINUS
{ Debug("unaryTests/-");	CurrentSemanticValue.lg = new BooleanLiteral(true); }
        break;
      case 61: // endpoint -> simpleValue
{ Debug("endpoint/value"); CurrentSemanticValue.nd = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 62: // simpleValue -> simpleLiteral
{ Debug("simpleValue/lit");	CurrentSemanticValue.nd = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 63: // simpleValue -> qualifiedName
{ Debug("simpleValue/qn");	CurrentSemanticValue.nd = ValueStack[ValueStack.Depth-1].qn; }
        break;
      case 64: // qualifiedName -> NAME
{ CurrentSemanticValue.qn = new QualifiedName(ValueStack[ValueStack.Depth-1].s);		}
        break;
      case 65: // qualifiedName -> qualifiedName, DOT, NAME
{ CurrentSemanticValue.qn = ValueStack[ValueStack.Depth-3].qn;	CurrentSemanticValue.qn.AddComponent(ValueStack[ValueStack.Depth-1].s);	}
        break;
      case 66: // addition -> expression, OP_PLUS, expression
{ Debug("add"); CurrentSemanticValue = new Add(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 67: // subtraction -> expression, OP_MINUS, expression
{ Debug("sub"); CurrentSemanticValue = new Sub(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 68: // multiplication -> expression, OP_MUL, expression
{ Debug("mul"); CurrentSemanticValue = new Mul(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 69: // division -> expression, OP_DIV, expression
{ Debug("div"); CurrentSemanticValue = new Div(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 70: // exponentiation -> expression, OP_POW, expression
{ Debug("pow"); CurrentSemanticValue = new Pow(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 71: // arithmeticNegation -> OP_MINUS, expression
{ Debug("neg"); CurrentSemanticValue = new Neg(ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 72: // literal -> simpleLiteral
{ Debug("literal/simLit");	CurrentSemanticValue.nd = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 73: // literal -> NULL
{ Debug("literal/null");	CurrentSemanticValue.nd = ValueStack[ValueStack.Depth-1]; }
        break;
      case 74: // simpleLiteral -> numericLiteral
{ Debug("simpleLiteral/num");	CurrentSemanticValue.nd = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 75: // simpleLiteral -> stringLiteral
{ Debug("simpleLiteral/str");	CurrentSemanticValue.nd = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 76: // simpleLiteral -> booleanLiteral
{ Debug("simpleLiteral/bool");	CurrentSemanticValue.nd = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 77: // simpleLiteral -> dateTimeLiteral
{ Debug("simpleLiteral/dt");	CurrentSemanticValue.nd = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 78: // stringLiteral -> STRING
{ CurrentSemanticValue.nd = new StringLiteral(ValueStack[ValueStack.Depth-1].s); }
        break;
      case 79: // booleanLiteral -> BOOLEAN
{ CurrentSemanticValue.nd = new BooleanLiteral(ValueStack[ValueStack.Depth-1].b); }
        break;
      case 80: // numericLiteral -> NUMBER
{ Debug("numericLiteral");     CurrentSemanticValue.nd = new NumericLiteral( ValueStack[ValueStack.Depth-1].n); }
        break;
      case 81: // numericLiteral -> OP_MINUS, NUMBER
{ Debug("numericLiteral/neg"); CurrentSemanticValue.nd = new NumericLiteral(-ValueStack[ValueStack.Depth-1].n); }
        break;
      case 82: // functionInvocation -> expression, parameters
{ Debug("functionInvocation");	CurrentSemanticValue.nd = new FunctionInvocation(ValueStack[ValueStack.Depth-2].ex, ValueStack[ValueStack.Depth-1]); }
        break;
      case 83: // parameters -> P_OPEN, namedParameters, P_CLOSE
{ Debug("parameters/named");	CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 84: // parameters -> P_OPEN, expressionList, P_CLOSE
{ Debug("parameters/pos");		CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 85: // namedParameters -> namedParameter
{ Debug("namedParameters");	  CurrentSemanticValue = new NamedParameterList(ValueStack[ValueStack.Depth-1]); }
        break;
      case 86: // namedParameters -> namedParameters, COMMA, namedParameter
{ Debug("namedParameters/,"); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; CurrentSemanticValue.Add(ValueStack[ValueStack.Depth-1]);			   }
        break;
      case 87: // namedParameter -> NAME, COLON, expression
{ Debug("namedParameter");	  CurrentSemanticValue = new NamedParam(ValueStack[ValueStack.Depth-3].s, ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 88: // pathExpression -> expression, DOT, NAME
{ Debug("pathExpression"); CurrentSemanticValue.ex = new PathExpression(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].s); }
        break;
      case 89: // forExpression -> FOR, inParts, RETURN, expression
{ Debug("forExpression");  CurrentSemanticValue.ex = new For(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 90: // ifExpression -> IF, expression, THEN, expression, ELSE, expression
{ Debug("ifExpression");  CurrentSemanticValue.ex = new If(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 91: // quantifiedExpression -> quantorOp, NAME, IN, inParts, SATISFIES, expression
{ Debug("quantifiedExpression");  CurrentSemanticValue.ex = new QuantifiedExpression(ValueStack[ValueStack.Depth-6].qo, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 92: // quantorOp -> SOME
{ CurrentSemanticValue.qo = QuantorOperator.Some;  }
        break;
      case 93: // quantorOp -> EVERY
{ CurrentSemanticValue.qo = QuantorOperator.Every; }
        break;
      case 94: // inParts -> inPart
{ Debug("inParts");   CurrentSemanticValue = new InPartList(ValueStack[ValueStack.Depth-1]); }
        break;
      case 95: // inParts -> inParts, COMMA, inPart
{ Debug("inParts/,"); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; CurrentSemanticValue.Add(ValueStack[ValueStack.Depth-1]);	   }
        break;
      case 96: // inPart -> NAME, IN, expression
{ Debug("inPart");   CurrentSemanticValue = new InPart(ValueStack[ValueStack.Depth-3].s, ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 97: // disjunction -> expression, OR, expression
{ Debug("disjunction");  CurrentSemanticValue.ex = new Or(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 98: // conjunction -> expression, AND, expression
{ Debug("conjunction");  CurrentSemanticValue.ex = new And(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 99: // comparison -> expression, comparisonOp, expression
{ Debug("comparision/cmp");	 CurrentSemanticValue.lg = new Comparison(ValueStack[ValueStack.Depth-2].co, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex);		 }
        break;
      case 100: // comparison -> expression, BETWEEN, expression, AND, expression
{ Debug("comparision/btw");	 CurrentSemanticValue.lg = new Range(true, true, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-5].ex); }
        break;
      case 101: // comparison -> expression, IN, positiveUnaryTests
{ Debug("comparision/in");	 CurrentSemanticValue.lg = new In(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].lg);					 }
        break;
      case 102: // comparison -> expression, IN, P_OPEN, positiveUnaryTests, P_CLOSE
{ Debug("comparision/P_in"); CurrentSemanticValue.lg = new In(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-2].lg);					 }
        break;
      case 103: // comparisonOp -> C_NE
{ CurrentSemanticValue.co = ComparisonOperator.NotEqual;			  }
        break;
      case 104: // comparisonOp -> C_EQ
{ CurrentSemanticValue.co = ComparisonOperator.Equal;			  }
        break;
      case 105: // comparisonOp -> C_LT
{ CurrentSemanticValue.co = ComparisonOperator.LessThan;			  }
        break;
      case 106: // comparisonOp -> C_LE
{ CurrentSemanticValue.co = ComparisonOperator.LessThanOrEqual;	  }
        break;
      case 107: // comparisonOp -> C_GT
{ CurrentSemanticValue.co = ComparisonOperator.GreaterThan;		  }
        break;
      case 108: // comparisonOp -> C_GE
{ CurrentSemanticValue.co = ComparisonOperator.GreaterThanOrEqual; }
        break;
      case 109: // filterExpression -> expression, SP_OPEN, expression, SP_CLOSE
{ Debug("filterExpression"); CurrentSemanticValue.ex = new Filter(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-2].ex); }
        break;
      case 110: // instanceOf -> expression, INSTANCE, OF, qualifiedName
{ Debug("instanceOf"); CurrentSemanticValue.lg = new InstanceOf(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-1].qn); }
        break;
      case 111: // boxedExpression -> SP_OPEN, expressionList, SP_CLOSE
{ Debug("boxedExpression/list");	CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2]; }
        break;
      case 112: // boxedExpression -> CP_OPEN, contextEntries, CP_CLOSE
{ Debug("boxedExpression/context"); CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2]; }
        break;
      case 113: // boxedExpression -> functionDefinition
{ Debug("boxedExpression/funDef");  CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 114: // expressionList -> expression
{ Debug("expressionList");   CurrentSemanticValue = new ExpressionList(ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 115: // expressionList -> expressionList, COMMA, expression
{ Debug("expressionList/,"); CurrentSemanticValue = ValueStack[ValueStack.Depth-3];		  CurrentSemanticValue.Add(ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 118: // nameList -> NAME
{ Debug("formatParameterList");   CurrentSemanticValue = new nameList(ValueStack[ValueStack.Depth-1].s); }
        break;
      case 119: // nameList -> nameList, COMMA, NAME
{ Debug("formatParameterList/,"); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; CurrentSemanticValue.Add(ValueStack[ValueStack.Depth-1].s);	 }
        break;
      case 120: // contextEntries -> contextEntry
{ Debug("contextEntries/,"); CurrentSemanticValue = new ContextEntryList(ValueStack[ValueStack.Depth-1]); }
        break;
      case 121: // contextEntries -> contextEntries, COMMA, contextEntry
{ Debug("contextEntries/,"); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; CurrentSemanticValue.Add(ValueStack[ValueStack.Depth-1]);			}
        break;
      case 122: // contextEntry -> key, COLON, expression
{ Debug("contextEntry");	CurrentSemanticValue = new KeyValue(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1].ex); }
        break;
      case 123: // key -> NAME
{ Debug("key/name");	CurrentSemanticValue = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 124: // key -> stringLiteral
{ Debug("key/strLit");	CurrentSemanticValue = ValueStack[ValueStack.Depth-1].nd; }
        break;
      case 125: // dateTimeLiteral -> DATE, P_OPEN, stringLiteral, P_CLOSE
{ CurrentSemanticValue.nd = DateTimeLiteral.ParseDate(((StringLiteral) ValueStack[ValueStack.Depth-2].nd).Value);		 }
        break;
      case 126: // dateTimeLiteral -> TIME, P_OPEN, stringLiteral, P_CLOSE
{ CurrentSemanticValue.nd = DateTimeLiteral.ParseTime(((StringLiteral) ValueStack[ValueStack.Depth-2].nd).Value);		 }
        break;
      case 127: // dateTimeLiteral -> DATE, AND, TIME, P_OPEN, stringLiteral, P_CLOSE
{ CurrentSemanticValue.nd = DateTimeLiteral.ParseDateAndTime(((StringLiteral) ValueStack[ValueStack.Depth-2].nd).Value); }
        break;
      case 128: // dateTimeLiteral -> DURATION, P_OPEN, stringLiteral, P_CLOSE
{ CurrentSemanticValue.nd = TimeSpanLiteral.Parse(((StringLiteral) ValueStack[ValueStack.Depth-2].nd).Value);			 }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


// The use code section.
// It is empty, because use code goes in a partial class.
}
}
