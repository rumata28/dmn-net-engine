
// ==========================================================================
//  GPLEX error listing for lex source file <SFeel.Language.analyzer.lex>
// ==========================================================================
//  Version:  1.2.2
//  Machine:  CABINET
//  DateTime: 6/25/2016 12:13:32 AM
//  UserName: Andrey
// ==========================================================================


%namespace Softengi.DmnEngine.SFeel.Parser
%scannertype SFeelScanner
%visibility internal
%using Softengi.DmnEngine.SFeel.Ast
%tokentype Token
//^^^^^^^^
// Error: Unexpected symbol, skipping to  <%%> 
// Error: Parser error <Syntax error, unexpected %tokentype, expecting ;, or .> 
// -----------------------------------------------------------------------------

%option stack, minimize, parser, verbose, persistbuffer, noembedbuffers 

Eol						(\r\n?|\n)
NotWh					[^ \t\r\n]
Space					[ \t]
Digit					[0-9]
Digits					{Digit}+
Alpha					[A-Z_a-z]

%{

%}

%%

/* Scanner body */

[\-]{Digits}[[\.]{Digits}]	{ Debug();		GetNumber(); return (int) Token.NUMBER; }
//---^^^^^^
// Error: Unknown lexical category <Digits> 
// -----------------------------------------
[\-]\.{Digits}				{ Debug();		GetNumber(); return (int) Token.NUMBER; }
//-----^^^^^^
// Error: Unknown lexical category <Digits> 
// -----------------------------------------

not							{ Debug();		return (int) Token.NOT; }

{Alpha}({Alpha}|{Digit})*	{ Debug();		return (int) Token.NAME; }
//^^^^
// Error: Unknown lexical category <Alpha> 
// ----------------------------------------


\-						{ Debug();		return (int) Token.OP_MINUS; }
\+						{ Debug();		return (int) Token.OP_PLUS; }
\/						{ Debug();		return (int) Token.OP_DIV; }
\*\*					{ Debug();		return (int) Token.OP_POW; }
\*						{ Debug();		return (int) Token.OP_MUL; }

\(						{ Debug();		return (int) Token.P_OPEN; }
\)						{ Debug();		return (int) Token.P_CLOSE; }
\[						{ Debug();		return (int) Token.SP_OPEN; }
\]						{ Debug();		return (int) Token.SP_CLOSE; }

\=						{ Debug(); yylval.co = ComparisonOperator.Equal;				return (int) Token.C_EQ; }
\<=						{ Debug(); yylval.co = ComparisonOperator.LessThan;			 	return (int) Token.C_LE; }
\<						{ Debug(); yylval.co = ComparisonOperator.LessThanOrEqual;	 	return (int) Token.C_LT; }
\>=						{ Debug(); yylval.co = ComparisonOperator.GreaterThan;		 	return (int) Token.C_GE; }
\>						{ Debug(); yylval.co = ComparisonOperator.GreaterThanOrEqual;	return (int) Token.C_GT; }

\.\.					{ Debug();		return (int) Token.RANGE; }
\.						{ Debug();		return (int) Token.DOT; }
\,						{ Debug();		return (int) Token.COMMA; }

{Space}+				/* skip */
//^^^^
// Error: Unknown lexical category <Space> 
// ----------------------------------------
.						{ throw new Exception("Unexpected character"); }


%%

// The use code section.
// It is empty, because use code goes in a partial class.
// ==========================================================================

